- Class: meta
  Course: Programowanie w R
  Lesson: Brakujace wartosci
  Author: Nick Carchedi, Dariusz Brzezinski
  Type: Standard
  Organization: JHU Biostat, Poznan University of Technology
  Version: 1.0.0

- Class: text
  Output: Brakujące wartości odgrywają ważną rolę w analizie danych. Często brakujące wartości nie powinny być ignorowane tylko uważnie zbadane, aby określić powód, dla którego nie ma ich w analizowanym zbiorze.

- Class: text
  Output: W R do określania wartości brakujących używana jest wartość NA (od angielskiego 'not available'). W ramach tej lekcji dowiesz się jak podchwytliwe potrafią być wartości NA.

- Class: cmd_question
  Output: Jakakolwiek operacja zawierająca NA z reguły zwraca NA. Aby to zilustrować, stwórz wektor c(44, NA, 5, NA) i przypisz go do zmiennej x.
  CorrectAnswer: x <- c(44, NA, 5, NA)
  AnswerTests: omnitest(correctExpr='x <- c(44, NA, 5, NA)')
  Hint: Przypisz wektor c(44, NA, 5, NA) do zmiennej x. NA musi być pisane wielkimi literami.

- Class: cmd_question
  Output: Teraz, przemnóżmy x przez 3.
  CorrectAnswer: x * 3
  AnswerTests: ANY_of_exprs('x * 3', '3 * x')
  Hint: Wpisz x * 3.

- Class: text
  Output: Zwróć uwagę, że elementy wynikowego wektora mają wartości NA tam gdzie miał je wektor x.

- Class: cmd_question
  Output: Aby urozmaicić trochę sprawę, stwórzmy wektor zawierający 1000 wartości losowych ze standardowego rozkładu normalnego y <- rnorm(1000).
  CorrectAnswer: y <- rnorm(1000)
  AnswerTests: omnitest(correctExpr='y <- rnorm(1000)')
  Hint: Funkcja rnorm() generuje losowe liczby zgodnie z rozkładem normalnym. Wpisz y <- rnorm(1000).

- Class: cmd_question
  Output: Teraz stwórzmy wektor zawierający 1000 wartości NA za pomocą z <- rep(NA, 1000).
  CorrectAnswer: z <- rep(NA, 1000)
  AnswerTests: omnitest(correctExpr='z <- rep(NA, 1000)')
  Hint: Wpisz z <- rep(NA, 1000), aby wygenerować 1000 wartości NA.

- Class: cmd_question
  Output: Na koniec wybierzmy losowo 100 elementów z tych 2000 wartości (połączenia y i z) w taki sposób, abyśmy nie wiedzieli gdzie i ile wartości NA trafi do wektora wynikowego --- my_data <- sample(c(y, z), 100).
  CorrectAnswer: my_data <- sample(c(y, z), 100)
  AnswerTests: omnitest(correctExpr='my_data <- sample(c(y, z), 100)')
  Hint: Funkcja sample() tworzy losową próbkę ze zmiennej podanej jako pierwszy argument (w tym wypadku c(y, z)) o rozmiarze podanym jako drugi argument (100). Polecenie my_data <- sample(c(y, z), 100) da nam to czego potrzebujemy.

- Class: cmd_question
  Output: Najpierw zadajmy sobie pytanie na jakich pozycjach znajdują się wartości NA w wektorze wynikowym. Funkcja is.na() powie nam czy dany element jest wartością brakującą czy nie. Wykonaj is.na() na elementach my_data i przypisz wynik tej operacji do my_na.
  CorrectAnswer: my_na <- is.na(my_data)
  AnswerTests: omnitest(correctExpr='my_na <- is.na(my_data)')
  Hint: Przypisz wynik wyrażenia is.na(my_data) do zmiennej my_na.

- Class: cmd_question
  Output: A teraz wypisz zawartość my_na i zobacz co dostaniesz.
  CorrectAnswer: my_na
  AnswerTests: omnitest(correctExpr='my_na')
  Hint: Wpisz my_na, aby zobaczyć zawartość tej zmiennej.

- Class: text
  Output: Wszędzie tam gdzie widzisz wartość TRUE wiesz, że w my_data występuje wartość NA. I vice versa, tam gdzie widzisz FALSE, wiesz że element pochodzi z losowej próbki standardowego rozkładu normalnego.

- Class: cmd_question
  Output: W jednej z poprzenich lekcji, dotyczącej operatorów logicznych, zapoznaliśmy się z operatorem `==` pozwalającym określić równość dwóch obiektów. Możnaby w takim razie przypuścić, że my_data == NA zwróci ten sam wynik co is.na(). Sprawdź to.
  CorrectAnswer: my_data == NA
  AnswerTests: omnitest(correctExpr='my_data == NA')
  Hint: Wypróbuj my_data == NA i zobacz co się stanie.

- Class: text
  Output: Powód dla którego dostałeś wektor cały wypełniony wartościami NA jest taki, że NA nie ma tak naprawdę konkretnej wartości, a jest raczej znacznikiem wartości, która jest niedostępna. Dlatego też wyrażenie logiczne jest niepełne i R nie ma innego wyboru jak tylko zwrócić wektor o tej samej długości co my_data cały wypełniony wartościami/znacznikami NA.

- Class: text
  Output: Trochę to zakręcone, ale clue jest takie żeby uważać na operacje logiczne gdy tylko pojawiają się w okolicy wartości NA. Jeśli stracisz czujność, zaczniesz dostawać pełno NA i nie będziesz zadowolony ;)

- Class: text
  Output: Wracając do zadania. Jak już mamy wektor my_na, w którym wartości TRUE odpowiadają każdej wartości NA a FALSE każdej liczbie, możemy policzyć łączną liczbę wystąpień NA w naszych danych.

- Class: text
  Output: Trik polega na tym, aby zrozumieć, że gdzieś głęboko w środku R reprezentuje TRUE jako 1 a FALSE jako 0 (sic!). A zatem, jeśli policzymy sumę sterty TRUE-ów  FALSE-ów, dostaniemy łączną liczbę TRUE-ów (piękne te spolszczenia... wzruszyłem się...).

- Class: cmd_question
  Output: Sprawdźmy czy to działa. Wywołaj funkcję sum() na my_na. Nie przypisuj wyniku do żadnej zmiennej.
  CorrectAnswer: sum(my_na)
  AnswerTests: omnitest(correctExpr='sum(my_na)')
  Hint: Wpisz sum(my_na), aby policzyć liczbę wartości NA w wektorze.

- Class: cmd_question
  Output: Nieźle, co? Na koniec, aby upewnić się, że wszystko się zgadza, wypisz my_data na konsolę.
  CorrectAnswer: my_data
  AnswerTests: omnitest(correctExpr='my_data')
  Hint: Wypisz my_data na konsolę.

- Class: cmd_question
  Output: Teraz jak już mamy NA w miarę opanowane, spójrzmy na inny rodzaj brakującyh wartości --- NaN, z angielska 'not a number'. Aby dostać NaNa, spróbuj podzielić 0 przez 0.
  CorrectAnswer: 0/0
  AnswerTests: omnitest(correctExpr='0/0')
  Hint: Spróbuj 0/0.

- Class: cmd_question
  Output: Zróbmy jeszcze jedną ostatnią rzecz. W R Inf oznacza nieskończoność (ang. infinity). Co się stanie jak odejmiesz Inf od Inf?
  CorrectAnswer: Inf - Inf
  AnswerTests: omnitest(correctExpr='Inf - Inf')
  Hint: Wpisz Inf - Inf. Czy dasz radę zgadnąć wynik?
