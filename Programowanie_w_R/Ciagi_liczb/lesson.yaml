- Class: meta
  Course: Programowanie w R
  Lesson: Ciagi liczb
  Author: Nick Carchedi, Dariusz Brzeziński
  Type: Standard
  Organization: JHU Biostat, Poznan University of Technology
  Version: 1.0.0

- Class: text
  Output: W tej lekcji dowiesz się jak tworzyć ciągi liczb w R.

- Class: cmd_question
  Output: Najprostszym sposobem tworzenia ciągów liczb w R jest wykorzystanie operatora `:`. Wpisz 1:20, aby zobaczyć jak ten operator działa.
  CorrectAnswer: '1:20'
  AnswerTests: omnitest(correctExpr='1:20')
  Hint: Wpisz 1:20 bez spacji. Upewnij się, że wpisujesz dwukropek a nie średnik.

- Class: cmd_question
  Output: I w ten sposób dostaliśmy wszystkie liczby całkowite z przedziału od 1 do 20. 
    Za pomocą tego operatora możemy też dostać ciąg liczb rzeczywistych. Spróbuj wpisać na przykład pi:10.
  CorrectAnswer: pi:10
  AnswerTests: omnitest(correctExpr='pi:10')
  Hint: Wpisz pi:10 i zobacz co się stanie. pi to predefiniowana stała w R 3.1415....

- Class: text
  Output: Rezultatem jest ciąg liczb zaczynający się od pi (3.142...) i rosnący co jeden. Górna granica (10) nie zostaje osiągnięta, ponieważ kolejna liczba w ciągu byłaby większa niż 10.

- Class: cmd_question
  Output: 'A co się stanie jak wpiszemy 15:1?'
  CorrectAnswer: '15:1'
  AnswerTests: omnitest(correctExpr='15:1')
  Hint: Wpisz 15:1 i wciśnij Enter.

- Class: text
  Output: Tym razem odliczyliśmy od 15 w dól z krokiem równym 1. Jest to rzadziej
    potrzebna funkcjonalność, ale warto wiedzieć jak uzyskać taki efekt.

- Class: text
  Output: "Pamiętaj, że jeśli masz pytania co do jakiejś fukcji w R, zawsze możesz
    zajrzeć do dokumentacji: ?intrygujaca_funkcja. Jednkaże w przypadku operatorów
    jak wykorzystany przed chwilą dwukropek, musisz otoczyć symbol lewymi apostrofami 
    w ten sposób: ?`:`. (Klawisz z lewym apostrofem (`) znajduje się z reguły
    w okolicach lewego górnego rogu klawiatury powyżej klawisza Tab. Jeśli nie masz
    tego klawisza, możesz skorzystać ze zwykłych apostrofów.)"

- Class: cmd_question
  Output: Otwórz dokumentację dla operatora zakresu `:`.
  CorrectAnswer: ?`:`
  AnswerTests: ANY_of_exprs('?`:`', "?':'", '?":"')
  Hint: "Dokumentacja dla operatorów wymaga apostrofów. Spróbuj wpisać ?`:`."

- Class: text
  Output: Czasami będziemy potrzebować większej kontroli nad ciągiem liczb niż ta oferowana przez operator `:`. W tym celu przyda nam się funkcja seq().

- Class: cmd_question
  Output: W podstawowym zastosowaniu funkcja seq() robi to samo co operator `:`.
    Wpisz seq(1, 20) i zobacz co dostaniesz.
  CorrectAnswer: seq(1, 20)
  AnswerTests: omnitest(correctExpr='seq(1, 20)')
  Hint: Wpisz seq(1, 20) i wciśnij Enter. Jakby co, spacja po przecinku nie jest wymagana,
    ale każdy lubi porządek w swoim kodzie.

- Class: cmd_question
  Output: Dostaliśmy ten sam wynik co wpisując 1:20. Załóżmy jednak, że chcemy
    dostać ciąg liczb od 0 do 10, z krokiem 0,5. seq(0, 10,
    by=0.5) zrobi właśnie to. Spróbuj.
  CorrectAnswer: seq(0, 10, by=0.5)
  AnswerTests: omnitest(correctExpr='seq(0, 10, by=0.5)')
  Hint: Wciąż korzystamy z funkcji seq(), ale tym razem z dodatkowym argumentem, który ustala krok na 0,5. Wpisz seq(0, 10, by=0.5).

- Class: cmd_question
  Output: A może wcale nie interesuje nas jaki jest krok tylko chcemy ciąg 30 liczb
    pomiędzy 5 i 10. Polecenie seq(5, 10, length=30) powinno dać sobie z tym radę. 
    Spróbuj wykonać właśnie to polecenie i przypisać jego wynik do zmiennej my_seq.
  CorrectAnswer: my_seq <- seq(5, 10, length=30)
  AnswerTests: omnitest(correctExpr='my_seq <- seq(5, 10, length=30)')
  Hint: 'Korzystamy z tej samej funkcji co wcześniej, ale zmieniamy 		argumenty. Pamiętaj, aby przypisać wynik do zmiennej my_seq:
    my_seq <- seq(5, 10, length=30).'

- Class: cmd_question
  Output: Aby upewnić się, że my_seq ma długość 30, możemy wykorzystać funkcję length(). Spróbuj teraz.
  CorrectAnswer: length(my_seq)
  AnswerTests: omnitest(correctExpr='length(my_seq)')
  Hint: Wpisz length(my_seq), aby zobaczyć długość zmiennej my_seq.

- Class: text
  Output: Przypuśćmy, że nie znamy długości my_seq, ale chcemy wygenerować ciąg liczb od 1 do N, gdzie N to długość wektora my_seq.
  
- Class: cmd_question
  Output: 'Jest kilka sposobów w jakie można to zrobić. Jedną możliwością byłoby wykorzystanie operatora `:` i funkcji length(): 1:length(my_seq). Wypróbuj tę opcję.'
  CorrectAnswer: 1:length(my_seq)
  AnswerTests: omnitest(correctExpr='1:length(my_seq)')
  Hint: Wypróbuj 1:length(my_seq), bez przypisywania wyniku do jakiejkolwiek zmiennej.

- Class: cmd_question
  Output: Inną opcją jest wykorzystanie seq(along.with = my_seq). Spróbuj.
  CorrectAnswer: seq(along.with = my_seq)
  AnswerTests: omnitest(correctExpr='seq(along.with = my_seq)')
  Hint: Wpisz seq(along.with = my_seq). Pamiętaj, że w razie problemów mozesz wpisać ?seq, aby dowiedzieć się więcej o funkcji seq().

- Class: cmd_question
  Output: "R ma jednak wbudowaną funkcję idealnie nadającą się do tego zadania: seq_along(). Wpisz seq_along(my_seq), by zobaczyć jak działa."
  CorrectAnswer: seq_along(my_seq)
  AnswerTests: omnitest(correctExpr='seq_along(my_seq)')
  Hint: Funkcja seq_along() jest wariacją funkcji seq(). Wypróbuj seq_along(my_seq), by uzyskać ten sam efekt w jeszcze inny sposób.

- Class: text
  Output: Jeśli R ma wbudowaną funkcję do wykonania jakiegoś zadania, jest bardzo
    prawdopodobnym, że została ona zoptymalizowana i jest najlepszym wyborem. Już
    niedługo sam zaczniesz pisać własne funkcje, gdy nie ma innego prostego rozwiązania.

- Class: text
  Output: Kolejną funkcją powiązaną z tworzeniem ciągów liczb jest rep(). Przyjrzyjmy się jej zastosowaniom.

- Class: cmd_question
  Output: Jeśli chcemy stworzyć wektor, ktory zawiera 40 zer, możemy skorzystać z rep(0, times = 40). Spróbuj.
  CorrectAnswer: rep(0, times = 40)
  AnswerTests: omnitest(correctExpr='rep(0, times = 40)')
  Hint: Wpisz rep(0, times = 40), aby stworzyć wektor 40 zer.

- Class: cmd_question
  Output: Jeśli zamiast tego chcielibyśmy, aby nasz wektor zawierał 10 powtórzeń 
   wektora (0, 1, 2), możemy wpisać rep(c(0, 1, 2), times = 10).
  CorrectAnswer: rep(c(0, 1, 2), times = 10)
  AnswerTests: omnitest(correctExpr='rep(c(0, 1, 2), times = 10)')
  Hint: Wypróbuj rep(c(0, 1, 2), times = 10). Pamiętaj, aby użyć funkcji c()
    dzięki której R połączy liczby 0, 1, 2 w wektor.

- Class: cmd_question
  Output: Na koniec przypuśćmy, że zamiast powtarzać wektor (0, 1, 2) w kółko, chcemy, aby nasz wektor posiadał 10 zer, potem 10 jedynek, potem 10 dwójek. Możemy to zrobić z pomocą parametru `each`. Wpisz rep(c(0, 1, 2), each = 10).
  CorrectAnswer: rep(c(0, 1, 2), each = 10)
  AnswerTests: omnitest(correctExpr='rep(c(0, 1, 2), each = 10)')
  Hint: Wpisz rep(c(0, 1, 2), each = 10), aby zobaczyć jak argument `each` zmienia działanie funkcji rep().

