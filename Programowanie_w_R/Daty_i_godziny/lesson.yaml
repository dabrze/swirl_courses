- Class: meta
  Course: Programowanie w R
  Lesson: Daty i godziny
  Author: Nick Carchedi, Dariusz Brzezinski
  Type: Standard
  Organization: JHU Biostat, Poznan University of Technology
  Version: 1.0.0

- Class: text
  Output: R potrafi przetwarzać daty i godziny, co pomocne jest jeśli pracujesz z szeregami czasowymi albo jeśli dane zawierają inne informacje związane z czasem, takie jak daty urodzin. 

- Class: text
  Output: Daty reprezentuje klasa 'Date' a godziny klasy 'POSIXct' i 'POSIXlt'. Wewnątrz, daty zapisane są jako liczba dni od 1970-01-01, a godziny zapisane są albo jako liczba sekund od 1970-01-01 (POSIXct) albo lista sekund, minut, godzin, itd.(POSIXlt).

- Class: cmd_question
  Output: Zacznijmy od wpisania d1 <- Sys.Date(), aby uzyskać bieżące dane i zapisać je w zmiennej d1. (To litera 'd' i liczba 1.)
  CorrectAnswer: d1 <- Sys.Date()
  AnswerTests: omnitest(correctExpr='d1 <- Sys.Date()')
  Hint: Wpisz d1 <- Sys.Date(), aby uzyskać bieżące dane i zapisać je w zmiennej d1.

- Class: cmd_question
  Output: Użyj funkcji class(), aby powierdzić, że d1 jest obiektem typu Date.
  CorrectAnswer: class(d1)
  AnswerTests: omnitest(correctExpr='class(d1)')
  Hint: class(d1) zwróci klasę/typ zmiennej d1.

- Class: cmd_question
  Output: Możesz skorzystać z funkcji unclass(), aby zobaczyć co naprawdę d1 kryje w środku. Spróbuj.
  CorrectAnswer: unclass(d1)
  AnswerTests: omnitest(correctExpr='unclass(d1)')
  Hint: Skorzystaj z funkcji unclass(), aby zobaczyć jak d1 wygląda od wewnątrz.

- Class: text
  Output: That's the exact number of days since 1970-01-01!

- Class: cmd_question
  Output: Jeśli jednak wypiszesz d1 na konsoli, otrzymasz dzisiejszą datę Spróbuj.
  CorrectAnswer: d1
  AnswerTests: omnitest(correctExpr='d1')
  Hint: Wpisz d1, aby wypisać tę zmienną na konsoli.

- Class: cmd_question
  Output: A co jeśli musimy uzyskać datę sprzed 1.01.1970 r.? Utwórz zmienną d2, która zawiera as.Date("1969-01-01").
  CorrectAnswer: d2 <- as.Date("1969-01-01")
  AnswerTests: omnitest(correctExpr='d2 <- as.Date("1969-01-01")')
  Hint: Wypróbuj d2 <- as.Date("1969-01-01").

- Class: cmd_question
  Output: Teraz znów użyj unclass(), aby zobaczyć co d2 kryje w środku. 
  CorrectAnswer: unclass(d2)
  AnswerTests: omnitest(correctExpr='unclass(d2)')
  Hint: unclass(d2) pokaże ci jak d2 wygląda od wewnątrz.

- Class: text
  Output: Jak pewnie mogłeś się spodziewać, otrzymałeś liczbę ujemną. W tym przypadku -365 jako że 1969-01-01 wypada dokładnie jeden rok kalendarzowy (tj. 365 dni) PRZED datą 1970-01-01.

- Class: cmd_question
  Output: A teraz zobaczmy jak R przechowuje godziny. Możesz sprawdzić aktualną datę i godzinę korzystając z fukncji Sys.time() bez argumentów. Zrób to i zapisz wynik w zmiennej o nazwie t1.
  CorrectAnswer: t1 <- Sys.time()
  AnswerTests: omnitest(correctExpr='t1 <- Sys.time()')
  Hint: t1 <- Sys.time() zapisze aktualną datę i godzinę do zmiennej o nazwie t1. 

- Class: cmd_question
  Output: Wyświetl zawartość t1.
  CorrectAnswer: t1
  AnswerTests: omnitest(correctExpr='t1')
  Hint: Wpisz t1, aby zobaczyć jej zawartość.

- Class: cmd_question
  Output: I speawdź typ zmiennej t1.
  CorrectAnswer: class(t1)
  AnswerTests: omnitest(correctExpr='class(t1)')
  Hint: Wyświetl typ zmiennej t1 używając class(t1).

- Class: cmd_question
  Output: Jak już wspominaliśmy, POSIXct jest tylko jedynym z dwóch sposobów w jaki R przedstawia informacje o godzinie (możesz zignorować format POSIXt, który funkcjonuje jako powszechny język pomiędzy POSIXct i POSIXlt.) Użyj unclass(), aby zobaczyć jak t1 wygląda od wewnątrz -- powinna to być liczba sekund od początku 1970 roku. 
  CorrectAnswer: unclass(t1)
  AnswerTests: omnitest(correctExpr='unclass(t1)')
  Hint: Użyj unclass(t1), aby zobaczyć ile sekund minęło od początku 1970 roku. 

- Class: cmd_question
  Output: Sys.time() domyślnie zwraca obiekt klasy POSIXct, ale możemy rzutować to na POSIXlt za pomocą as.POSIXlt(Sys.time()). Spróbuj i zapisz wynik w t2. 
  CorrectAnswer: t2 <- as.POSIXlt(Sys.time())
  AnswerTests: omnitest(correctExpr='t2 <- as.POSIXlt(Sys.time())')
  Hint: t2 <- as.POSIXlt(Sys.time()) zrzutuje wynik Sys.time na 'POSIXlt' i zapisze rezultat.

- Class: cmd_question
  Output: Sprawdź klasę t2.
  CorrectAnswer: class(t2)
  AnswerTests: omnitest(correctExpr='class(t2)')
  Hint: Wpisz class(t2), aby wyświetlić jej klasę.

- Class: cmd_question
  Output: A teraz wyświetl jej zawartość.  
  CorrectAnswer: t2
  AnswerTests: omnitest(correctExpr='t2')
  Hint: Wipsz t2, aby wyświetlić jej zawartość. 

- Class: cmd_question
  Output: t2 zwraca ten sam format gdziny co t1. Teraz użyj unclass() na t2, aby zobaczyć jak różni się wewnętrznie. 
  CorrectAnswer: unclass(t2)
  AnswerTests: omnitest(correctExpr='unclass(t2)')
  Hint: Użyj unclass(t2), aby wyświetlić jego wewnętrzną strukturę.

- Class: cmd_question
  Output: t2, jak wszystkie obiekty POSIXlt, jest listą wartości, które składają się na datę i godzinę. Wpisz str(unclass(t2)), aby zobaczyć bardziej kompaktową reprezentację tej struktury.
  CorrectAnswer: str(unclass(t2))
  AnswerTests: omnitest(correctExpr='str(unclass(t2))')
  Hint: Wpisz str(unclass(t2)), aby zobaczyć bardziej kompaktową reprezentację struktury zmiennej t2.

- Class: cmd_question
  Output: Jeśli, na przykład, chcemy uzyskać jedynie minuty z godzin zapisanych w t2, możemy je wyświetlić przy pomocy t2$min. Spróbuj.
  CorrectAnswer: t2$min
  AnswerTests: omnitest(correctExpr='t2$min')
  Hint: Dzięki t2$min uzyskasz liczbę minut z godziny zapisanych w t2.

- Class: text
  Output: Gdy już zapoznaliśmy się ze wszystkimi trzema typami obiektów dat i godzin, spójrzmy na kilka funkcji, które wyciągają przydatne informacje z każdego z tych obiektów -- weekdays(), months() i quarters().

- Class: cmd_question
  Output: Funkcja weekdays() wyświetli dzień tygodnia każdego obiektu daty czy godziny. Wypróbuj tę funkcję na d1, która jest obiektem Date zawierającym dzisiejszą datę.  
  CorrectAnswer: weekdays(d1)
  AnswerTests: omnitest(correctExpr='weekdays(d1)')
  Hint: Wypróbuj weekdays(d1), aby otrzymać dzień tygodnia. 

- Class: cmd_question
  Output: Funkcja months() również działa dla każdego obiektu daty i godziny. Wypróbuj ją na t1, który jest obiektem POSIXct zawierającym aktualną godzinę (a raczej była to aktualna godzina kiedy ją tworzyłeś).
  CorrectAnswer: months(t1)
  AnswerTests: omnitest(correctExpr='months(t1)')
  Hint: Dzięki months(t1) uzyskasz aktualny miesiąc. 

- Class: cmd_question
  Output: Funkcja quarters() pozyska kwartał roku (Q1-Q4) z każdego obiektu daty i godziny. Wypróbuj ją na t2, który jest obiektem POSIXlt zawierającym czas kiedy go utworzyłeś.  
  CorrectAnswer: quarters(t2)
  AnswerTests: omnitest(correctExpr='quarters(t2)')
  Hint: Dzięki quarters(t2) uzyskasz aktualny kwartał. 

- Class: text
  Output: Często daty i godziny w zbiorze danych będą w formacie, którego R nie rozpozna. W tej sytuacji pomocna może okazać się funkcja strptime().

- Class: text
  Output: strptime() przekształca wektory tekstowe w obiekty POSIXlt. W tym znaczeniu są one podobne do as.POSIXlt(). Różnią się tym, że dane wejściowe nie muszą być w konkretnym formacie.

- Class: cmd_question
  Output: Żeby zobaczyć jak to dziala, zapisz następujący łańcuch znaków w zmiennej o nazwie t3: "October 17, 1986 08:24".
  CorrectAnswer: t3 <- "October 17, 1986 08:24"
  AnswerTests: omnitest(correctExpr='t3 <- "October 17, 1986 08:24"')
  Hint: Zapisz tekst "October 17, 1986 08:24" w nowej zmiennej o nazwie t3. 

- Class: cmd_question
  Output: Teraz użyj strptime(t3, "%B %d, %Y %H:%M"), aby pomóc R przekształcić nasz obiekt daty/godziny na format który rozumie. Przypisz wynik do nowej zmiennej o nazwie t4 (powinieneś otworzyć dokumentację strptime(), jeśli chcesz wiedzieć lepiej jak to działa). 
  CorrectAnswer: t4 <- strptime(t3, "%B %d, %Y %H:%M")
  AnswerTests: omnitest(correctExpr='t4 <- strptime(t3, "%B %d, %Y %H:%M")')
  Hint: 't4 <- strptime(t3, "%B %d, %Y %H:%M") przekształci nasz obiekt daty/godziny na format, który R rozumie. 

- Class: cmd_question
  Output: Wypisz na konsolę zawartość t4.  
  CorrectAnswer: t4
  AnswerTests: omnitest(correctExpr='t4')
  Hint: Wpisz t4, aby wypisać na konsolę jej treść.

- Class: cmd_question
  Output: Takiego formatu mogliśmy się spodziewać. Teraz sprawdźmy jego klasę, class().
  CorrectAnswer: class(t4)
  AnswerTests: omnitest(correctExpr='class(t4)')
  Hint: Wpisz class(t4), aby sprawdzić jego klasę.

- Class: text
  Output: Na koniec, możesz wykonać jeszcze kilka operacji na datach i godzinach, m.in. operacje arytmetyczne (+ i -) i porównania (<, ==, itd.) 

- Class: cmd_question
  Output: "Zmienna t1 zawiera godzinę, o której ją utworzyłeś (pamiętaj, że użyłeś Sys.time()). Potwierdź, że upłynął czas odkąd utworzyłeś t1, korzystając z operatora 'większy niż', aby porównać ją z aktualnym czasem: Sys.time() > t1"
  CorrectAnswer: Sys.time() > t1
  AnswerTests: omnitest(correctExpr='Sys.time() > t1')
  Hint: Sys.time() > t1 powie ci, że aktualna godzina jest po czasie zawartym w t1 (co było aktualnym czasem, gdy ją tworzyłeś).  

- Class: cmd_question
  Output: Wiemy więc, że upłynął pewien czas, ale ile dokładnie? Spróbuj odjąć t1 od aktualnej godziny używając Sys.time() - t1.
  CorrectAnswer: Sys.time() - t1
  AnswerTests: omnitest(correctExpr='Sys.time() - t1')
  Hint: Sys.time() - t1 poda ci ile czasu minęło odkąd utworzona została zmienna t1. 

- Class: text
  Output: Tak samo możemy potraktować dodawanie i inne operatory porównania. Jeśli chcesz mieć większą kontrolę nad jednostakami, szukając powyższej różnicy pomiędzy godzinami, możesz użyć funkcji difftime(), która pozwala określić parametr 'units'. 

- Class: cmd_question
  Output: Użyj difftime(Sys.time(), t1, units = 'days'), aby dowiedzieć się ile DNI upłynęło odkąd utworzyłeś t1.
  CorrectAnswer: difftime(Sys.time(), t1, units = 'days')
  AnswerTests: match_call("difftime(Sys.time(), t1, units = 'days')")
  Hint: difftime(Sys.time(), t1, units = 'days') pokaże Ci ile dni upłynęło odkąd utworzone zostało t1 (i lepiej, żeby nie było ich więcej niż 1!) 

- Class: text
  Output: W czasie tej lekcji nauczyłeś się jak pracować z datami i godzinami w R. Ważne jest by rozumieć podstawy, jeśli jednak często będziesz pracował z datami i godzinami, warto zapoznać się z paczką lubridate Hadley'a Wickhama. Ale o lubridate pogadamy jeszcze na innej lekcji...
