- Class: meta
  Course: Programowanie w R
  Lesson: Filtrowanie wektorow
  Author: Nick Carchedi, Dariusz Brzeziński
  Type: Standard
  Organization: JHU Biostat, Poznan University of Technology
  Version: 1.0.1

- Class: text
  Output: W ramach tej lekcji dowiesz się jak filtrować elementy wektorów w oparciu o zdefiniowane przez Ciebie warunki.

- Class: text
  Output: Dla przykładu, możesz być zainteresowany tylko pierwszymi 20 elementami wektora, tylko elementami które nie są NA albo tymi które sa dodatnie lub równe wybranej zmiennej. Pod koniec tej lekcji będziesz wiedział jak poradzić sobie z każdym z tych scenariuszy.

- Class: cmd_question
  Output: Stworzyłem dla Ciebie wektor o nazwie x który zawiera 20 losowych liczb (ze standardowego rozkładu normalnego) i 20 wartości NA. Wpisz x, aby zobaczyć jak wygląda.
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr='x')
  Hint: Wpisz x, aby zobaczyć zawartość wektora.

- Class: text
  Output: Aby R wiedziało, że chcesz wybrać  tylko część elementów z wektora musisz przekazać tzw. 'wektor indeksujący' w kwadratowych nawiasach podanych od razu po nazwie wektora.

- Class: cmd_question
  Output: Aby sprawdzić, że to działa, wpisz x[1:10] i wyświetl pierwsze 10 elementów x.
  CorrectAnswer: x[1:10]
  AnswerTests: omnitest(correctExpr='x[1:10]')
  Hint: Wyświetl pierwsze dziesięć elementów x za pomocą wyrażenia x[1:10].

- Class: text
  Output: Wektory indeksujące występują w czterech smakach -- wektorów logicznych, wektorów liczb dodatnich, wektorów liczb ujemnych i wektorów tekstowych -- z których każdy poznasz w ramach tej lekcji.

- Class: text
  Output: Zacznijmy od indeksowania przez wektory logiczne. Jednym z częstszych problemów podczas pracy z prawdziwymi danymi jest chęć pozostawienia tylko tych elementów, które nie mają wartości NA. Przypomnij sobie, że is.na(x) zwraca wektor wartości logicznych tej samej długości co x, z wartościami TRUE odpowiadającymi NA i wartościami FALSE odpowiadającymi elementom, które nie są NA.

- Class: mult_question
  Output: Jak myślisz co zwróci x[is.na(x)]?
  AnswerChoices: Wektor wypełniony samymi NA; Wektor bez NA; Wektor z wartościami TRUE i FALSE; Wektor o długości 0
  CorrectAnswer: Wektor wypełniony samymi NA
  AnswerTests: omnitest(correctVal="Wektor wypełniony samymi NA")
  Hint: Pamiętaj, że is.na(x) mówi nam gdzie są wartości NA w wektorze. Zatem jeśli filtrujemy x w oparciu o tę informację, co powinniśmy dostać?

- Class: cmd_question
  Output: Sprawdź to wpisując x[is.na(x)].
  CorrectAnswer: x[is.na(x)]
  AnswerTests: omnitest(correctExpr='x[is.na(x)]')
  Hint: Wpisz x[is.na(x)], aby zobaczyć że dostaniesz wektor wypełniony samymi NA.

- Class: cmd_question
  Output: Jak zapewne pamiętasz `!` zwraca negację wyrażenia logicznego. Zatem jeśli chcemy stworzyć wektor y, który zawiera wszystkie elementy z x, które nie są NA, możemy wykorzystać wyrażenie y <- x[!is.na(x)]. Spróbuj.
  CorrectAnswer: y <- x[!is.na(x)]
  AnswerTests: omnitest(correctExpr='y <- x[!is.na(x)]')
  Hint: Wpisz y <- x[!is.na(x)], aby wyłapać z wektora x wszystkie wartości, które nie są NA.

- Class: cmd_question
  Output: Wypisz y na konsolę.
  CorrectAnswer: "y"
  AnswerTests: omnitest(correctExpr='y')
  Hint: Wpisz y, aby zobaczyć jego zawartość.

- Class: text
  Output: Skoro już wyizolowaliśmy wszystkie elementy wektora x, które nie są NA, możemy spokojnie przejść do filtrowania wektora y.

- Class: mult_question
  Output: Jak wiesz z poprzednich lekcji, wyrażenie y > 0 zwróci wektor o tej samej długości co y, z wartościami TRUE wszędzie tam gdzie element jest większy od 0 i FALSE wszędzie tam gdzie element jest mniejszy równy 0. Jak myślisz, co zwróci y[y > 0]?
  AnswerChoices: Wektor z dodatnimi elementami y; Wektor z ujemnymi elementami y; Wektor z samymi NA; Wektor o dlugości 0; Wektor z wartościami TRUE i FALSE
  CorrectAnswer: Wektor z dodatnimi elementami y
  AnswerTests: omnitest(correctVal="Wektor z dodatnimi elementami y")
  Hint: Wyrażenie logiczne y > 0 zwróci TRUE dla każdego dodatniego elementu y. Co zatem zwróci y[y > 0]?

- Class: cmd_question
  Output: Wpisz y[y > 0], aby zobaczyć, że dostaliśmy same dodatnie elementy wektora y, które są też wszystkimi dodatnimi elementami wektora x.
  CorrectAnswer: y[y > 0]
  AnswerTests: omnitest(correctExpr='y[y > 0]')
  Hint: Wpisz y[y > 0], aby zobaczyć dodatnie elementy wektora y.

- Class: cmd_question
  Output: Możesz się zastanawiać dlaczego do razu nie wpisaliśmy x[x > 0], aby wyłuskać dodatnie elementy wektora x. Zobacz dlaczego tak nie zrobiliśmy.
  CorrectAnswer: x[x > 0]
  AnswerTests: omnitest(correctExpr='x[x > 0]')
  Hint: Wpisz x[x > 0], aby zobaczyć czemu nie skorzystaliśmy z tego podejścia.

- Class: text
  Output: Ponieważ NA nie jest tak naprawdę żadną wartością tylko nośnikiem nieznanej wartości, wyrażenie NA > 0 zwraca NA. Dlatego dostaliśmy całą stertę NA wymieszaną z dodatnimi elementami.

- Class: cmd_question
  Output: Łącząc wiedzę o operatorach logicznych z nowo zdobytą wiedzą o filtrowaniu, możemy zrobić coś takiego -- x[!is.na(x) & x > 0]. Spróbuj.
  CorrectAnswer: x[!is.na(x) & x > 0]
  AnswerTests: omnitest(correctExpr='x[!is.na(x) & x > 0]')
  Hint: Wpisz x[!is.na(x) & x > 0] i zobacz co dostaniesz.

- Class: text
  Output: W tym wyrażeniu poprosiliśmy o tylko te elementy x, które mają znaną wartość i jest ona większa od zera.

- Class: text
  Output: Już wcześniej widziałeś jak odfiltrować pierwsze dziesięć elementów wektora x za pomocą wyrażenia x[1:10]. Jest to przykład przekazania wektora liczb (całkowitych!) dodatnich, który mówi R, że ma zostawić elementy o pozycji/identyfikatorze od 1 do 10.

- Class: text
  Output: Wiele języków programowania indeksuje struktury od zera. R należy do językow z grupy 'one-based indexing', a tym samym indeksuje struktury od 1.

- Class: cmd_question
  Output: Byłbyś w stanie wymyśleć sposób, aby zostawić tylko 3, 5, i 7 element wektora x? Wskazówka -- użyj funkcji c().
  CorrectAnswer: x[c(3, 5, 7)]
  AnswerTests: omnitest(correctExpr='x[c(3, 5, 7)]')
  Hint: Stwórz wektor indeksujący c(3, 5, 7) i użyj go w nawiasach kwadratowych.

- Class: cmd_question
  Output: Ważnym jest, aby filtrując x liczbami naturalnymi trzymać się indeksów ze zbioru {1, 2, ..., 40}, gdyż x ma tylko 40 elementów. Co się stanie jeśli poprosimy o zerowy element wektora x (x[0])? Zobacz.
  CorrectAnswer: x[0]
  AnswerTests: omnitest(correctExpr='x[0]')
  Hint: Wpisz x[0], aby zobaczyć co się stanie jeśli odwolamy się do zerowego indeksu, który nie jest zdefiniowany w R.

- Class: cmd_question
  Output: Jak można się było spodziewać, nie dostaliśmy niczego pożytecznego. Niestety R nie powstrzyma nas przed zrobieniem czegoś takiego. A co jeśli poprosimy o 3000 element x? Sprawdź.
  CorrectAnswer: x[3000]
  AnswerTests: omnitest(correctExpr='x[3000]')
  Hint: Poproś o 3000 element x (który nie istnieje) za pomocą wyrażenia x[3000].

- Class: text
  Output: Ponownie, nic ciekawego, ale R nie powstrzyma nas przed zadaniem takiego pytania. To powinna być przestroga. Powinieneś się zawsze upewnić, że to o co prosisz leży w zakresie wektora, z którym pracujesz.

- Class: text
  Output: A co jeśli chcemy zwrócić wszystkie elementy wektora x POZA drugim i dziesiątym? Nie byłoby to zbyt wygodne gdybyś musiał zbudować wektor zawierający wszystkie liczby z przedziału od 1 do 40 OPRÓCZ 2 i 10.

- Class: cmd_question
  Output: Na szczęście R przyjmuje także liczby ujemne jako indeksy. Podczas gdy x[c(2, 10)] zwraca TYLKO drugi i dziesiąty element wektora x, x[c(-2, -10)] zwraca wszystkie elementy OPRÓCZ drugiego i dziesiątego. Wypróbuj x[c(-2, -10)], aby to sprawdzić.
  CorrectAnswer: x[c(-2, -10)]
  AnswerTests: omnitest(correctExpr='x[c(-2, -10)]')
  Hint: Wypróbuj x[c(-2, -10)].

- Class: cmd_question
  Output: Krótszym sposobem specyfikowania wielu liczb ujemnych jest postawienie znaku minus przed wektorem liczb dodatnich. Wpisz x[-c(2, 10)], aby dostać ten sam rezultat.
  CorrectAnswer: x[-c(2, 10)]
  AnswerTests: omnitest(correctExpr='x[-c(2, 10)]')
  Hint: Użyj wyrażenia x[-c(2, 10)], aby trochę upróścić kod. To może się naprawdę przydać, gdy specyfikujesz dużo liczb ujemnych.

- Class: text
  Output: Do tej pory omówiliśmy trzy typy wektorów indeksujących -- logiczne, liczb dodatnich i liczb ujemnych. Ostatni typ wektorów indeksujących wymaga od nas wprowadzenia koncepcji elementów nazwanych.

- Class: cmd_question
  Output: Stwórz wektor liczbowy zawierący trzy elementy nazwane za pomocą vect <- c(foo = 11, bar = 2, norf = NA).
  CorrectAnswer: vect <- c(foo = 11, bar = 2, norf = NA)
  AnswerTests: omnitest(correctExpr='vect <- c(foo = 11, bar = 2, norf = NA)')
  Hint: Stwórz wektor nazwany za pomoca wyrażenia vect <- c(foo = 11, bar = 2, norf = NA).

- Class: cmd_question
  Output: Kiedy wypiszemy vect na konsolę, zobaczysz, że każdy element ma nazwę. Spróbuj.
  CorrectAnswer: vect
  AnswerTests: omnitest(correctExpr='vect')
  Hint: Wpisz vect, aby zobaczyć jego zawartość.

- Class: cmd_question
  Output: Możemy dostać też nazwy elementów w vect wykorzystując funkcję names(). Zobacz jak to działa.
  CorrectAnswer: names(vect)
  AnswerTests: omnitest(correctExpr='names(vect)')
  Hint: Zobacz wynik wyrażenia names(vect).

- Class: cmd_question
  Output: Możemy także stworzyć wektor nienazwany vect2 za pomocą c(11, 2, NA). Zrób to teraz.
  CorrectAnswer: vect2 <- c(11, 2, NA)
  AnswerTests: omnitest(correctExpr='vect2 <- c(11, 2, NA)')
  Hint: Stwórz zwyczajny (nienazwany) wektor o nazwie vect2, który przechowuje c(11, 2, NA).

- Class: cmd_question
  Output: Teraz możemy nazwać elementy wektora vect2 za pomocą names(vect2) <- c("foo", "bar", "norf"). Dalej, spróbuj.
  CorrectAnswer: names(vect2) <- c("foo", "bar", "norf")
  AnswerTests: omnitest(correctExpr='names(vect2) <- c("foo", "bar", "norf")')
  Hint: Nazwij elementy wektora vect2 za pomocą wyrażenia names(vect2) <- c("foo", "bar", "norf").

- Class: cmd_question
  Output: Sprawdźmy teraz czy vect i vect2 są takie same. Przekaż oba wektory jako argumenty funkcji identical().
  CorrectAnswer: identical(vect, vect2)
  AnswerTests: any_of_exprs('identical(vect, vect2)', 'identical(vect2, vect)')
  Hint: Funkcja identical() mówi czy jej dwa pierwsze argumenty są identyczne.

- Class: text
  Output: No i proszę, vect i vect2 są identycznymi wektorami.

- Class: mult_question
  Output: Wracając do filtrowania wektorów nazwanych. Jak myślisz, które polecenie zwróci drugi element wektora vect?
  AnswerChoices: vect["bar"]; vect[bar]; vect["2"]
  CorrectAnswer: vect["bar"]
  AnswerTests: omnitest(correctVal='vect["bar"]')
  Hint: A gdybym spytał o komendę, która wyłuskuje element o nazwie "bar"?

- Class: cmd_question
  Output: Sprawdź czy rzeczywiście tak jest.
  CorrectAnswer: vect["bar"]
  AnswerTests: omnitest(correctExpr='vect["bar"]')
  Hint: Wpisz vect["bar"].

- Class: cmd_question
  Output: W podobny sposób możemy przekazać wektory nazw, np. vect[c("foo", "bar")]. Wypróbuj to polecenie teraz.
  CorrectAnswer: vect[c("foo", "bar")]
  AnswerTests: omnitest(correctExpr='vect[c("foo", "bar")]')
  Hint: Wpisz vect[c("foo", "bar")], aby przefiltrować elementy o nazwach "foo" i "bar".

- Class: text
  Output: Znasz już wszystkie cztery sposoby filtrowania wektorów. Różne sposoby nadają się najlepiej do różnych zadań. W razie wątpliwości, sprawdź który sposób działa najlepiej!
