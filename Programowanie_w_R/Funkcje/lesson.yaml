- Class: meta
  Course: Programowanie w R
  Lesson: Funkcje
  Author: Sean Kross, Dariusz Brzeziński
  Type: Standard
  Organization: swirlstats, Poznan University of Technology
  Version: 1.0.0

- Class: text
  Output: Funkcje są podstawowym elementem języka R. Najpierw poznamy parę podstawowych funkcji wbudowanych w R, a potem zaczniesz pisać własne.

- Class: cmd_question
  Output: "Przykładem prostej bezparametrowej funkcji może być Sys.Date(), która zwraca aktualną datę. Wywołaj ją i zobacz wynik."
  CorrectAnswer: Sys.Date()
  AnswerTests: omnitest(correctExpr='Sys.Date()')
  Hint: "Wyświetl dzisiejszą datę za pomocą: Sys.Date()"

- Class: cmd_question
  Output: "Kolejną funkcją, którą warto znać jest mean(). Funkcja mean() pobiera wektor liczb i oblicza ich średnią. Przekaż wektor c(2, 4, 5) jako parametr funkcji mean()."
  CorrectAnswer: mean(c(2, 4, 5))
  AnswerTests: omnitest(correctExpr='mean(c(2, 4, 5))')
  Hint: "Oblicz średnią liczb 2, 4, 5, wpisując mean(c(2, 4, 5))"

- Class: text
  Output: W kolejnym pytaniu zostaniesz poproszony o zmodyfikowanie skryptu, który pojawi się po przejściu do następnego kroku. Gdy skończysz modyfikować skrypt, zapisz zmiany i wpisz w konsoli submit() a skrypt zostanie sprawdzony. W skrypcie bedą komentarze, które warto przeczytać!

- Class: script
  Output: Ostatnie wykonane w ramach funkcji w R jest wartością zwracaną przez tę funkcję. Chcemy, aby ta funkcja pobierała jeden argument, x, i zwracała x bez żadnych modyfikacji. Usuń kratkę (hash), aby funkcja zwracała x bez żadnych modyfikacji. Upewnij się, że zapisałeś skrypt zanim wpiszesz submit().
  AnswerTests: test_func1()
  Hint: Upewnij się że usunąłeś znak #, aby x było ostatnią instrukcją funkcji.
  Script: boring_function.R

- Class: cmd_question
  Output: "Skoro już napisałeś funkcję, przetestuj ją! Wpisz: 
    boring_function('Moja pierwsza funkcja!'). Jeśli Twoja funkcja działa poprawnie, powinna po prostu zwrócić: 'Moja pierwsza funkcja!'"
  CorrectAnswer: "boring_function('Moja pierwsza funkcja!')"
  AnswerTests: omnitest(correctExpr="boring_function('Moja pierwsza funkcja!')")
  Hint: "Przetestuj boring_function wpisując: boring_function('Moja pierwsza funkcja!')"

- Class: cmd_question
  Output: "Gratulacje, napisałeś pierwszą funkcję! Warto wiedzieć, że w R można łatwo poznać kod każdej funkcji -- wystarczy wpisać nazwę funkcji bez nawiasów. Wypróbujmy tę wiedzę na funkcji, którą właśnie stworzyłeś. Wpisz: boring_function, aby zobaczyć kod tej funkcji."
  CorrectAnswer: boring_function
  AnswerTests: omnitest(correctExpr='boring_function')
  Hint: "Aby zobaczyć kod funkcji boring_function po prostu wpisz: boring_function"

- Class: text
  Output: "Czas stworzyć przydatniejszą funkcję! Odtworzymy działanie funkcji mean() tworząc funkcję o nazwie: my_mean()." 

- Class: script
  Output: Upewnij się, że zapisałeś skrypt zanim wpiszesz submit().
  AnswerTests: test_func2()
  Hint: "Spróbuj użyć funkcji sum() i length()."
  Script: my_mean.R
  
- Class: cmd_question
  Output: "Teraz wypróbuj swoją implementację my_mean() na wektorze c(4, 5, 10)."
  CorrectAnswer: my_mean(c(4, 5, 10))
  AnswerTests: omnitest(correctExpr='my_mean(c(4, 5, 10))')
  Hint: "Wpisz my_mean(c(4, 5, 10)), aby wypróbować swoją nową funkcję." 

- Class: text
  Output: "Teraz spróbujemy napisać funkcję z domyślnymi wartościami argumentów. Możesz ustawiać wartości domyślne, jeśli uważasz, że wywoływana będzie głównie z daną wartością parametru."

- Class: script
  Output: Upewnij się, że zapisałeś skrypt zanim wpiszesz submit().
  AnswerTests: test_func3()
  Hint: "Pamiętaj, aby ustawić odpowiednie wartości domyślne!"
  Script: remainder.R

- Class: cmd_question
  Output: "Przetestujmy funkcję remainder. Wywołaj remainder(5) i zobacz co się stanie."
  CorrectAnswer: remainder(5)
  AnswerTests: omnitest(correctExpr='remainder(5)')
  Hint: "Wypróbujmy napisaną przez Ciebie funkcję, wywołując: remainder(5)"

- Class: text
  Output: "Upewnijmy się, że rozumiemy co się stało. Przekazałeś jeden argument do funkcji, R dopasowało ten argument do 'num', ponieważ 'num' jest periwszym parametrem. Domyślną wartością 'divisor' 2, więc funkcja wykorzystała tę wartość jako drugi parametr."

- Class: cmd_question
  Output: "Wypróbujmy działanie funkcji z dwoma parametrami. Wpisz: remainder(11, 5) i zobaczymy co się stanie."
  CorrectAnswer: remainder(11, 5)
  AnswerTests: omnitest(correctExpr='remainder(11, 5)')
  Hint: "Przetestujmy funkcję remainder wywołując: remainder(11, 5)"

- Class: text
  Output: "Ponownie, argumenty zostały poprawnie dopasowane."

- Class: cmd_question
  Output: "Możesz także nazwać parametry. Gdy jawnie przypisujesz parametry przez nazwę, ich kolejność przestaje być ważna. Możesz to sprawdzić wpisując: remainder(divisor = 11, num = 5)."
  CorrectAnswer: remainder(divisor = 11, num = 5)
  AnswerTests: omnitest(correctExpr='remainder(divisor = 11, num = 5)')
  Hint: "Kolejność nie jest ważna jeśli nazywasz parametry! Sprawdź to wpisując: remainder(divisor = 11, num = 5)"

- Class: text
  Output: "Jak widzisz, jest istotna różnica pomiędzy remainder(11, 5) i remainder(divisor = 11, num = 5)!"

- Class: cmd_question
  Output: "R potrafi też cześciowo dopasowywać nazwy argumentów. Spróbuj wywołać remainder(4, div = 2)."
  CorrectAnswer: remainder(4, div = 2)
  AnswerTests: omnitest(correctExpr='remainder(4, div = 2)')
  Hint: "Przetestuj częściowe dopasowywanie parametrów: remainder(4, div = 2)"

- Class: text
  Output: "Słowo przestrogi: chcesz pisać jak najczytelniejszy kod. Zmienianie kolejności parametrów w wywołaniu poprzez parametry nazwanych czy wykorzystywanie częściowego dopasowywania może być mylące, dlatego korzystaj z tych opcji z rozwagą!"

- Class: cmd_question
  Output: "Przy tym całym gadaniu o argumentach, możesz się zastanawiać czy jest sposób na poznanie argumentów funkcji bez otwierania dokumentacji. Okazuje się, że jest! Wpisz: args(remainder), aby poznać argumenty funkcji remainder."
  CorrectAnswer: args(remainder)
  AnswerTests: omnitest(correctExpr='args(remainder)')
  Hint: "Przejrzyj argumenty funkcji remainder wpisując: args(remainder)"

- Class: text
  Output: "Mogłeś sobie nie zdać z tego sprawy, ale właśnie zrobiłeś coś bardzo interesującego. args() jest funkcją, remainder() jest funkcją, a przekazałeś remainder jako argument args(). Tak, zgadłeś: w R możesz przekazywać funkcje jako argumenty! To bardzo przydatna funkcjonalność, którą zbadamy pisząc kolejny skrypt."

- Class: script
  Output: Upewnij się, że zapisałeś skrypt zanim wpiszesz submit().
  AnswerTests: test_func4()
  Hint: "Upewnij się, że przekazując funkcję jako parametr pomijasz nawiasy!"
  Script: evaluate.R

- Class: cmd_question
  Output: "Weźmy funkcję evaluate() w obroty! Uzyj evaluate do znalezienia odchylenia standardowego wektora c(1.4, 3.6, 7.9, 8.8)."
  CorrectAnswer: evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
  AnswerTests: omnitest(correctExpr='evaluate(sd, c(1.4, 3.6, 7.9, 8.8))')
  Hint: "Funkcja obliczająca odchylenie standardowe w R to sd(). Upewnij się, że przekazując funkcję jako parametr pomijasz nawiasy!"

- Class: text
  Output: "Idea przekazywania funkcji przez parametr jest ważnym podejściem do programowania w R."

- Class: text
  Output: "Warto też wspomnieć, że można przekazywać funkcje jako parametr bez nazywania ich. Funkcje, które nie posiadają nazwy zwane są funkcjami anonimowymi."

- Class: text
  Output: "Wykorzystajmy funkcję evaluate, aby zbadać jak funkcje anonimowe działają. Jako pierwszy argument evaluate przekażemy malutką funkcję, mieszczącą się w jednej linii kodu. Jako drugi argument przekażemy dane do wykorzystania przez naszą małą funkcję anonimową."

- Class: cmd_question
  Output: "Wpisz następujące polecenie, a potem omówimy jak działa: evaluate(function(x){x+1}, 6)"
  CorrectAnswer: evaluate(function(x){x+1}, 6)
  AnswerTests: test_eval1()
  Hint: "Po prostu wpisz polecenie evaluate(function(x){x+1}, 6)"

- Class: text
  Output: "Pierwszy argument to malutka funkcja anonimowa, która pobiera`x` i zwraca `x+1`. Przekazaliśmy liczbę 6  jako parametr tej funkcji, więc całe wyrażenie zwróciło 7."

- Class: cmd_question
  Output: "Spróbuj wykorzystać evaluate() i anonimową funcję, aby zwrócić pierwszy element wektora c(8, 4, 0). Twoja funkcja anonimowa powinna pobierać tylko jeden argument o nazwie `x`."
  CorrectAnswer: evaluate(function(x){x[1]}, c(8, 4, 0))
  AnswerTests: test_eval2()
  Hint: "Powinieneś pamiętać jak indeksuje się elementy wektora. Pamiętaj, że Twoja funkcja anonimowa powinna mieć tylko jeden parametr `x`."

- Class: cmd_question
  Output: "Teraz spróbuj wykorzystać evaluate() i anonimową funcję, aby zwrócić ostatni element wektora c(8, 4, 0). Twoja funkcja anonimowa powinna pobierać tylko jeden argument o nazwie `x`."
  CorrectAnswer: evaluate(function(x){x[length(x)]}, c(8, 4, 0))
  AnswerTests: test_eval3()
  Hint: "Powinieneś pamiętać jak indeksuje się elementy wektora. Pamiętaj, że Twoja funkcja anonimowa powinna mieć tylko jeden parametr `x`. Znajomość funkcji length() może okazać się pomocna."

- Class: cmd_question
  Output: "Przez resztę lekcji będziemy często korzystać z funkcji paste(). Wpisz ?paste, aby przejrzeć dokumentację tej funkcji."
  CorrectAnswer: ?paste
  AnswerTests: omnitest(correctExpr='?paste')
  Hint: "Po prostu wpisz: ?paste"

- Class: text
  Output: "Jak widzisz pierwszym argumentem paste() jest `...`, które będę nazywał wielokropkiem. Wielokropek pozwala przekazać nieokreśloną liczbę argumentów do funkcji. W przypadku paste() dowolna liczba łańcuchów znaków może być przekazana jako argument funkcji paste(), która zwróci połączenie tych łańcuchów."

- Class: cmd_question
  Output: 'Tak żeby zobaczyć jak paste() działa, wpisz paste("R", "jest", "gites!")'
  CorrectAnswer: paste("R", "jest", "gites!")
  AnswerTests: omnitest(correctExpr='paste("R", "jest", "gites!")')
  Hint: 'Po prostu wpisz: paste("R", "jest", "gites!")'

- Class: text
  Output: "Czas napisać własną, zmodyfikowaną wersję funkcji paste()."

- Class: script 
  Output: Upewnij się, że zapisałeś skrypt zanim wpiszesz submit().
  AnswerTests: test_func5()
  Hint: "Pamiętaj, że argument występują po ..."
  Script: telegram.R

- Class: cmd_question
  Output: "Przetstujmy teraz nową funkcję. Wywołaj telegram z dowolnymi parametrami!"
  CorrectAnswer: telegram()
  AnswerTests: expr_uses_func('telegram')
  Hint: 'Wywołaj funkcję telegram z dowolnymi parametrami.'

- Class: script
  Output: Upewnij się, że zapisałeś skrypt zanim wpiszesz submit().
  AnswerTests: test_func6()
  Hint: "Twoja funkcja powinna składać się z trzech części: przechwycenia wielokropka za pomocą list(), rozpakowania argumentów i przekazania ich do funkcji paste()."
  Script: mad_libs.R

- Class: cmd_question
  Output: "Czas wykorzystać funkcję mad_libs. Upewnij się, że nazwałeś argumenty, miejsce, przymiotnik i rzeczownik, aby funkcja zadziałała."
  CorrectAnswer: mad_libs(miejsce = "", przymiotnik = "", rzeczownik = "")
  AnswerTests: expr_uses_func('mad_libs')
  Hint: 'Użyj funkcji mad_libs. Pamiętaj, aby użyć nazwanych parametrów.'

- Class: text
  Output: "Powoli kończymy lekcję, ale jest jeszcze jedna rzecz, której warto być świadomym."

- Class: text
  Output: "Wiesz jak dodawać, odejmować, mnożyć i dzielić liczby w R. Aby wykonać te czynności korzystasz z symboli +, -, *, i /. Te symbole to operatory binarne, czyli w praktyce funkcje, których parametry podaje się po ich lewej i prawej stronie."  

- Class: text
  Output: "W R możesz definiować własne operatory binarne. Następny skrypt pokaże Ci jak to się robi."

- Class: script
  Output: Upewnij się, że zapisałeś skrypt zanim wpiszesz submit().
  AnswerTests: test_func7()
  Hint: "Pamiętaj: 'Ahoj' %p% 'przygodo!', to sposób w jaki wykorzystuje się operatory binarne."
  Script: bin_op.R

- Class: cmd_question
  Output: "Stworzyłeś własny operator binarny! Przetestujmy go. Sklej następujące łańcuchy znaków: 'Ja', 'uwielbiam', 'Cię!' korzystając z nowo zdefinowanego operatora."
  CorrectAnswer: "'Ja' %p% 'uwielbiam' %p% 'Cię!'"
  AnswerTests: omnitest(correctExpr="'Ja' %p% 'uwielbiam' %p% 'Cię!'")
  Hint: 'Użyj %p% między kolejnymi łańcuchami znaków.'

- Class: text
  Output: "To już koniec! Teraz możesz śmiało pisać własne funkcje!"
