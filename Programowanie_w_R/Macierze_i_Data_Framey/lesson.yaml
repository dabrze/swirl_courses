- Class: meta
  Course: Programowanie w R
  Lesson: Macierze i Data Frame'y
  Author: Nick Carchedi, Dariusz Brzeziński
  Type: Standard
  Organization: JHU Biostat, Poznan University of Technology
  Version: 1.0.0

- Class: text
  Output: W ramach tej lekcji omówimy macierze i data frame'y (mógłbym je nazwać tabelami, ale i tak by się to nie przyjęło...). Obie struktury są typami "tabelarycznymi", składającymi się z wierszy i kolumn.

- Class: text
  Output: Główną różnicą między oboma typami jest to, że macierze przechowują elementy tylko jednego typu, podczas gdy data frame'y mogą składać się z wielu typów danych.

- Class: cmd_question
  Output: Stwórzmy wektor zawierający liczby od 1 do 20 za pomocą operatora `:`. Przypisz wynik do zmiennej my_vector.
  CorrectAnswer: my_vector <- 1:20
  AnswerTests: omnitest(correctExpr='my_vector <- 1:20')
  Hint: Uczyłeś się o operatorze `:` na lekcji dotyczącej ciągów liczbowych. Jeśli chcesz stworzyć wektor zawriejący licbzy 1, 2, 3 (w tej kolejności), możesz skorzystać z c(1, 2, 3) albo 1:3. W tym przypadku, chcemy przechować liczby od 1 do 20. Pamiętaj także, że nie potrzebujesz funkcji c(), gdy korzystasz z `:`.

- Class: cmd_question
  Output: Przejrzyj zawartość wektora, który właśnie stworzyłeś.
  CorrectAnswer: my_vector
  AnswerTests: omnitest(correctExpr='my_vector')
  Hint: Wpisz my_vector, żeby zobaczyć jego zawartość.

- Class: cmd_question
  Output: Funkcja dim() opisuje wymiary obiektu. Co się stanie, gdy wpiszemy dim(my_vector)? Sprawdź to.
  CorrectAnswer: dim(my_vector)
  AnswerTests: omnitest(correctExpr='dim(my_vector)')
  Hint: Po porstu wpisz dim(my_vector) i zobacz co się stanie.

- Class: cmd_question
  Output: Nie było to zbyt pomocne! Ponieważ my_vector jest wektorem, nie ma atrybutu `dim` (stąd NULL), ale możemy określić jego dlugość za pomocą funkcji length. Wypróbuj to teraz.
  CorrectAnswer: length(my_vector)
  AnswerTests: omnitest(correctExpr='length(my_vector)')
  Hint: Wpisz length(my_vector), aby zobaczyć długość wektora.

- Class: cmd_question
  Output: No i oto nam chodziło! Ale co się stanie, gdy dodamy do my_vect atrybut `dim`? Sprawdźmy to. Wpisz dim(my_vector) <- c(4, 5).
  CorrectAnswer: dim(my_vector) <- c(4, 5)
  AnswerTests: omnitest(correctExpr='dim(my_vector) <- c(4, 5)')
  Hint: Wpisz dim(my_vector) <- c(4, 5), aby ustawić atrybut `dim`.

- Class: text
  Output: Nie martw się jeśli ostatnie polecenie wydało Ci się dziwne. Powinno! Funkcja dim() pozwala odczytać LUB ustawić atrybut `dim` obiektu w R. W tym wypadku przypisaliśmy wartość c(4, 5) do atrybutu `dim` wektora my_vector.

- Class: cmd_question
  Output: Wywołaj dim(my_vector), aby potwierdzić, że poprawnie ustawiliśmy wartość atrybutu `dim`.
  CorrectAnswer: dim(my_vector)
  AnswerTests: omnitest(correctExpr='dim(my_vector)')
  Hint: Po prostu wpisz dim(my_vector), aby upewnić się, że atrybut `dim` został ustawiony.

- Class: cmd_question
  Output: Innym sposobem, aby sprawdzić czy ustawienie wymiarów się udało jest wywołanie funkcji attributes() na my_vector. Zobacz jak to działa.
  CorrectAnswer: attributes(my_vector)
  AnswerTests: omnitest(correctExpr='attributes(my_vector)')
  Hint: Polecenie attributes(my_vector) pokaże wszystkie atrybuty obiektu my_vector.

- Class: text
  Output: Gdy mówimy o dwuwymiarowych obiektach w R, pierwszy wymiar to wiersze, drugi to kolumny. Sprawiliśmy zatem, że my_vector ma 4 wiersze i 5 kolumn.

- Class: cmd_question
  Output: Ale, chwila moment! To już nie wygląda na wektor. No i nim nie jest -- teraz to macierz. Obejrzyj zawartość my_vector, żeby zobaczyć jak wygląda.
  CorrectAnswer: my_vector
  AnswerTests: omnitest(correctExpr='my_vector')
  Hint: Wpisz my_vector, aby zobaczyć jego zawartość.

- Class: cmd_question
  Output: Potwierdźmy teraz, że to rzeczywiście macierz wywołując funkcję class(). Wpisz class(my_vector) i zobacz o co mi chodzi.
  CorrectAnswer: class(my_vector)
  AnswerTests: omnitest(correctExpr='class(my_vector)')
  Hint: Wpisz class(my_vector), aby sprawdić klasę/typ zmiennej my_vector.

- Class: cmd_question
  Output: Nie ma wątpliwości, że my_vector jest teraz macierzą. Powinniśmy zachować ją do nowej zmiennej, która pomoże nam zapamiętać, że to macierz. Przypisz wartość my_vector do nowej zmiennej o nazwie my_matrix.
  CorrectAnswer: my_matrix <- my_vector
  AnswerTests: omnitest(correctExpr='my_matrix <- my_vector')
  Hint: Skoro nie możemy po prostu zmienić nazwy zmiennej my_vector, musimy przypisać jej wartość do nowej zmiennej my_matrix <- my_vector.

- Class: text
  Output: Rozważany do tej pory przykład miał pokazać, że macierz jest niczym innym jak wektorem z atrybutem dimension. Bardziej bezpośrednim sposobem tworzenia macierzy jest wykorzystanie funkcji matrix().

- Class: cmd_question
  Output: Otwórz plik pomocy dla funkcji matrix() korzystając z operatora `?`.
  CorrectAnswer: ?matrix
  AnswerTests: omnitest(correctExpr='?matrix')
  Hint: Polecenie ?matrix powinno załatwić sprawę.

- Class: cmd_question
  Output: Spójrz na dokumentację funkcji matrix i zobacz czy dasz radę wymyśleć sposób na stworzenie macierzy z tymi samymi liczbami (1-20) i wymiarami (4 wiersze, 5 kolumn). Przypisz wynik do zmiennej o nazwie my_matrix2.
  CorrectAnswer: my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
  AnswerTests: calculates_same_value('matrix(1:20, nrow=4, ncol=5)'); expr_creates_var('my_matrix2')
  Hint: Wywołaj funkcję matrix() z trzema argumentami -- 1:20, liczbą wierszy i liczbą kolumn. Upewnij się, że odwołujesz się do argumentów przez ich nazwy i zapisz wynik do zmiennej my_matrix2 (nie my_matrix).

- Class: cmd_question
  Output: Sprawdźmy teraz czy zmienne my_matrix i my_matrix2 są identyczne. Pomoże nam w tym funkcja identical(). Spróbuj.
  CorrectAnswer: identical(my_matrix, my_matrix2)
  AnswerTests: any_of_exprs('identical(my_matrix, my_matrix2)', 'identical(my_matrix2, my_matrix)')
  Hint: Jeśli ne jestes pewien co robić, sprawdź dokumentację funkcji identical() za pomocą operatora `?`.

- Class: text
  Output: Wyobraź sobie teraz, że liczby w macierzy reprezentują wyniki badań laboratoryjnych, gdzie każdy wiersz oznacza jednego pacjenta, a kolumna wynik jednego badania.

- Class: text
  Output: Warto by było poetykietować wiersze, aby wiedzieć które pomiary należą do której osoby. Jedną z możliwości jest dodanie do macierzy kolumny z imionami.

- Class: cmd_question
  Output: Zacznijmy od stworzenia wektora tekstowego zawierającego imiona naszych pacjentów -- Domarad, Lubomira, Drogostan, Uniegosta. Przypisz wektor imion do zmiennej patients.
  CorrectAnswer: patients <- c("Domarad", "Lubomira", "Drogostan", "Uniegosta")
  AnswerTests: omnitest(correctExpr='patients <- c("Domarad", "Lubomira", "Drogostan", "Uniegosta")')
  Hint: Upewnij się, że zaczynasz imiona z wielkiej litery i nie pokręć ich kolejności!

- Class: cmd_question
  Output: Teraz wykorzystamy funkcję cbind(), aby 'połączyć kolumny'. Na razie nie zachowuj wyniku do żadnej zmiennej. Po prostu wywołaj cbind() z dwoma argumentami -- wektorem patients i my_matrix.
  CorrectAnswer: cbind(patients, my_matrix)
  AnswerTests: omnitest(correctExpr='cbind(patients, my_matrix)')
  Hint: Wpisz cbind(patients, my_matrix) i dodaj imiona pacjentów do macierzy liczb.

- Class: text
  Output: Coś tu nie gra! Wygląda na to, że połączenie wektora tekstowego z macierzą liczb sprawiło, że wszystkie elementy są otoczone cudzysłowami. To oznacza, że dostaliśmy macierz łańcuchów znakowych, a nie o to nam chodziło.

- Class: text
  Output: Może pamiętasz jak na początku lekcji wspominałem, że macierze mogą przechowywać tylko JEDEN typ danych. Przez to ograniczenie, kiedy próbowaliśmy połączyć wektor tekstowy z macierzą liczbową, R było zmuszone niejawnie rzutować liczby na łańcuchy znaków, stąd "ciapki" w wyniku.

- Class: cmd_question
  Output: Ok, ale wciąż pozostaje pytanie jak zawrzeć imiona pacjentów w tabeli bez niszczenia danych liczbowych. Spróbuj następującego polecenia -- my_data <- data.frame(patients, my_matrix)
  CorrectAnswer: my_data <- data.frame(patients, my_matrix)
  AnswerTests: omnitest(correctExpr='my_data <- data.frame(patients, my_matrix)')
  Hint: Wpisz my_data <- data.frame(patients, my_matrix) i zobacz co sie stanie.

- Class: cmd_question
  Output: Obejrzyj teraz zawartość zmiennej my_data, aby zobaczyć co wskóraliśmy.
  CorrectAnswer: my_data
  AnswerTests: omnitest(correctExpr='my_data')
  Hint: Type my_data to view its contents.

- Class: text
  Output: Wygląda na to, że funkcja data.frame() pozwoliła nam przechować imiona pacjentów wespół z wynikami badań. I o to chodziło! 

- Class: text
  Output: Funkcja data.frame() to tak naprawdę konstruktor tworzący obiekty typu (tak, zgadłeś) `data.frame`.

- Class: cmd_question
  Output: Sprawdźmy czy tak rzeczywiście jest wywołując funkcję class() na my_data.
  CorrectAnswer: class(my_data)
  AnswerTests: omnitest(correctExpr='class(my_data)')
  Hint: Funkcja class poiera tylk jeden parametr -- obiekt dla którego chcemy określić typ.

- Class: text
  Output: Istnieje także możliwość przypisywania nazw do pojedynczych wierszy i kolumn data frame'a. Byłby to inny sposób na określenie który wiersz odpowiada któremu pacjentowi.

- Class: text
  Output: Ale skoro już rozwiązaliśmy ten problem, rozwiążmy inny. Przypiszmy nazwy kolumnom data frame'a, aby rozróżnić pomiary laboratoryjne.

- Class: cmd_question
  Output: Ponieważ mamy sześć kolumn (łącznie z imionami pacjentów), musimy stworzyć wektor sześciu nazw. Stwórz wektor tekstowy o nazwie cnames, który zawiera następujące nazwy (w tej kolejności) -- "pacjent", "wiek", "waga", "MCV", "MCH", "MCHC".
  CorrectAnswer: cnames <- c("pacjent", "wiek", "waga", "MCV", "MCH", "MCHC")
  AnswerTests: omnitest(correctExpr='cnames <- c("pacjent", "wiek", "waga", "MCV", "MCH", "MCHC")')
  Hint: Nie zapomnij o funkcji c().

- Class: cmd_question
  Output: Teraz za pomocą funkcji colnames() ustaw atrybut `colnames` naszego data frame'a. Powinno to wyglądać podobnie do tego jak wykorzystaliśmy funkcję dim().
  CorrectAnswer: colnames(my_data) <- cnames
  AnswerTests: omnitest(correctExpr='colnames(my_data) <- cnames')
  Hint: Spróbuj colnames(my_data) <- cnames.

- Class: cmd_question
  Output: Zobaczmy czy to załatwiło sprawę. Wyświetl my_data.
  CorrectAnswer: my_data
  AnswerTests: omnitest(correctExpr='my_data')
  Hint: Wyświetl zawartość my_data.

- Class: text
  Output: W ramach tej lekcji poznałeś podstawy działania dwóch bardzo ważnych struktur danych -- macierzy i data frame'a. Jest oczywiście wiele więcej rzeczy do poznania i będziemy jeszcze omawiać bardziej zaawanasowane problemy w przyszłych lekcjach, szczególnie jeśli chodzi o data frame'y.
