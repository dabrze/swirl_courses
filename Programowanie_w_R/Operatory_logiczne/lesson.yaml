- Class: meta
  Course: Programowanie w R
  Lesson: Operatory logiczne
  Author: Sean Kross, Dariusz Brzeziński
  Type: Standard
  Organization: swirlstats, Poznan University of Technology
  Version: 1.0.0

- Class: text
  Output: W ramach tej lekcji uzupełnimy wiedzę o operacjach logicznych w R.

- Class: text
  Output: Podarujemy sobie operatory `==`, `!=`, `<`, `<=`, `>`, `>=` i skupimy się na warunkach złożonych.

- Class: cmd_question
  Output: Zobaczmy jeszcze raz jak działa operator AND. Jak wspominaliśmy w jednej z poprzednich lekcji, operator AND w R ma dwie wersje, `&` i `&&`. Za pomocą `&` można wykonać operację AND na całym wektorze. Wersja `&&` działa tylko na skalarach (w starszych wersjach języka < 4.3.0 ewaluowany był tylko pierwszy element wektora). Wypróbujmy obie wersje w praktyce. Wpisz wyrażenie TRUE & c(TRUE, FALSE, FALSE)."
  CorrectAnswer: "TRUE & c(TRUE, FALSE, FALSE)"
  AnswerTests: omnitest(correctExpr='TRUE & c(TRUE, FALSE, FALSE)')
  Hint: "Wpisz: TRUE & c(TRUE, FALSE, FALSE)"

- Class: text
  Output: To co tu się wydarzyło to reiterowanie lewej strony operatora (`TRUE`) stosownie do długości prawej strony operatora. To to samo co wyrażenie c(TRUE, TRUE, TRUE) & c(TRUE, FALSE, FALSE). 

- Class: cmd_question
  Output: "Spróbujmy  zastosować operator `&&`. Wpisz teraz wyrażenie TRUE && FALSE."
  CorrectAnswer: "TRUE && FALSE"
  AnswerTests: omnitest(correctExpr='TRUE && FALSE')
  Hint: "Jak zaraz zobaczysz wersja && działa inaczej. Wpisz: TRUE && FALSE"

- Class: text
  Output: "W tym wypadku lewa strona operatora dopasowywana jest tylko do pierwszego elementu wektora. Pozostałe elementy nie są w ogóle brane pod uwagę."
    
- Class: cmd_question
  Output: "Operator OR też ma dwie wersje: | i ||. Wpisz TRUE | c(TRUE, FALSE, FALSE) i zobacz jak działa pierwsza wersja."
  CorrectAnswer: "TRUE | c(TRUE, FALSE, FALSE)"
  AnswerTests: omnitest(correctExpr='TRUE | c(TRUE, FALSE, FALSE)')
  Hint: "Wypróbuj zwektoryzowaną wersję operatora OR: TRUE | c(TRUE, FALSE, FALSE)"
  
- Class: cmd_question
  Output: "Teraz wypróbuj niezwektoryzowaną wersję tego operatora: TRUE || FALSE."
  CorrectAnswer: "TRUE || FALSE"
  AnswerTests: omnitest(correctExpr='TRUE || FALSE')
  Hint: "Jak zaraz zobaczysz operator || nie jest zwektoryzowany. Wpisz: TRUE || FALSE"
  
- Class : text
  Output: "To tyle jeśli chodzi o powtórkę. Teraz omówimy kilka wbudowanych funkcji R, które również mogą przydać się do warunkowania."
    
- Class : cmd_question
  Output: "Funkcja isTRUE() ma jeden parametr. Jeśli jego wartość wynosi TRUE, funkcja zwraca TRUE. W przeciwnym wypadku, funkcja zwraca FALSE.
    Wypróbuję tę funkcję i wpisz: isTRUE(6 > 4)"
  CorrectAnswer: "isTRUE(6 > 4)"
  AnswerTests: omnitest(correctExpr='isTRUE(6 > 4)')
  Hint: "Wypróbuj isTRUE(): isTRUE(6 > 4)"
  
- Class : cmd_question
  Output: "Funkcja identical() zwraca TRUE tylko gdy dwa obiekty przekazane jako parametry są identyczne. Sprawdź działanie tej funkcji wpisując: identical('foo', 'foo')"
  CorrectAnswer: "identical('foo', 'foo')"
  AnswerTests: omnitest(correctExpr="identical('foo', 'foo')")
  Hint: "Jeśli chcesz sprawdzić czy dwa obiekty R są identyczne, wpisz: identical('foo', 'foo')"
  
- Class : cmd_question
  Output: "Warto też znać funkcję xor(). Jak pewnie wiesz xor to skrót z angielskiego 'exclusive or'. Aby xor zwrócił TRUE, jeden i tylko jeden z jego argumentów musi być TRUE. Wypróbuj funkcję xor() wpisując: xor(5 == 6, !FALSE)"
  CorrectAnswer: "xor(5 == 6, !FALSE)"
  AnswerTests: omnitest(correctExpr='xor(5 == 6, !FALSE)')
  Hint: "Wypróbuj funkcję xor() wpisując do konsoli: xor(5 == 6, !FALSE)"
    
- Class : cmd_question
  Output: "Aby odpowiedzieć na następne kilka pytań, będziemy musieli stworzyć losowy wektor liczb od 1 do 10 o nazwie ints. Stwórz taki wektor wpisując: ints <- sample(10)"
  CorrectAnswer: "ints <- sample(10)"
  AnswerTests: omnitest(correctExpr='ints <- sample(10)')
  Hint: "Stwórz losowy wektor liczb od 1 do 10: ints <- sample(10)"
  
- Class : cmd_question
  Output: "Wyświetl zawartość zmiennej ints."
  CorrectAnswer: "ints"
  AnswerTests: omnitest(correctExpr='ints')
  Hint: "Wpisz do konsoli: ints"
  
- Class : cmd_question
  Output: "Jeśli wpiszemy ints > 5, dostaniemy wektor wartości logicznych odpowiadający na pytanie, które elementy są większe od 5. Wypróbuj to wyrażenie: ints > 5"
  CorrectAnswer: "ints > 5"
  AnswerTests: omnitest(correctExpr='ints > 5')
  Hint: "Aby zobaczyć, które elementy wektora `ints` są większe niż 5 wpisz: ints > 5"
  
- Class : text
  Output: "Wynikowy wektor możemy wykorzystać do zadawania innych pytań dotyczących ints. Funkcja which() pobiera wektor wartości logicznych jako parametr i zwraca indeksy elementów wektora, które mają wartość TRUE. Dla przykładu which(c(TRUE, FALSE, TRUE)) zwróciłoby wektor c(1, 3)."

- Class : cmd_question
  Output: "Użyj funkcji which(), aby określić które elementy ints są większe od 7."
  CorrectAnswer: "which(ints > 7)"
  AnswerTests: omnitest(correctExpr='which(ints > 7)')
  Hint: "Użyj funkcji which() na wektorze wartości logicznych zwracanym przez wyrażenie: `ints > 7`"
  
- Class: mult_question
  Output: Które z poniższych wyrażeń zwróciłoby indeksy elementów ints mniejszych lub równych 2?
  CorrectAnswer: "which(ints <= 2)"
  AnswerChoices: "ints < 2; ints <= 2; which(ints < 2); which(ints <= 2)"
  AnswerTests: omnitest(correctVal='which(ints <= 2)')
  Hint: 'Użyj funkcji which().'
  
- Class : text
  Output: "Podobnie jak funkcja which(), funkcje any() i all() biorą wektory wartości logicznych jako parametr. Jak już pewnie zdążyłeś się domyślić, funkcja any() zwróci TRUE, gdy jeden lub więcej elementów wektora jest TRUE. Funkcja all() zwróci TRUE tylko gdy każdy jego element jest TRUE."
    
- Class : cmd_question
  Output: "Użyj funkcji any(), aby zobaczyć czy jakikolwiek element ints jest mniejszy od zera."
  CorrectAnswer: "any(ints < 0)"
  AnswerTests: omnitest(correctExpr='any(ints < 0)')
  Hint: "Użyj funkcji any() na wektorze wartości logicznych: `ints < 0`"
  
- Class : cmd_question
  Output: "Użyj funkcji all(), aby upewnić się, że wszystkie elementy ints są większe od 0."
  CorrectAnswer: "all(ints > 0)"
  AnswerTests: omnitest(correctExpr='all(ints > 0)')
  Hint: "Użyj funkcji all() na wektorze: `ints > 0`"
  
- Class: mult_question
  Output: Które z poniższych wyrażeń zwróci TRUE?
  CorrectAnswer: "any(ints == 10)"
  AnswerChoices: "any(ints == 10); all(ints == 10); all(c(TRUE, FALSE, TRUE)); any(ints == 2.5)"
  AnswerTests: omnitest(correctVal='any(ints == 10)')
  Hint: "..."
  
- Class : text
  Output: "To tyle jeśli chodzi o operatory logiczne w R. Ta wiedza przyda nam się w kolejnej lekcji!"
