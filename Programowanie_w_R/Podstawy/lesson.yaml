- Class: meta
  Course: Programowanie w R
  Lesson: Podstawowy
  Author: Nick Carchedi, Dariusz Brzeziński
  Type: Standard
  Organization: Poznan University of Technology
  Version: 1.0.1

- Class: text
  Output: W ramach tej lekcji, poznamy podstawowe elementy języka R.

- Class: text
  Output: Jeśli na jakimkolwiek etapie chciałbyś uzyskać więcej informacji na dany temat związany z R, wpisz help.start() a pojawi się menu dostępnych zasobów pomocy (albo w ramach RStudio albo twojej domyślnej wyszukiwarki, w zależności od twoich ustawień). Ewentualnie, możesz szukać odpowiedzi wpisując zapytanie w wyszukiwarce. 
 
- Class: cmd_question
  Output: W swojej najprostszej formie R może być używany jako interaktywny kalkulator. Wpisz 5 + 7 i wciśnij Enter.
  CorrectAnswer: 5 + 7
  AnswerTests: omnitest(correctExpr='5 + 7')
  Hint: Wpisz 5 + 7 i wciśnij Enter.

- Class: text
  Output: R domyślnie wyświetli po prostu wynik 12. R jest jednak językiem programowania. Jak wiesz, często korzystamy z języka programowania, a nie kalkulatora, aby zautomatyzować pewne procesy albo uniknąć niepotrzebnych powtórzeń. 

- Class: text
  Output: W tym przypadku możemy chcieć wykorzystać uzyskany wynik do kolejnych obliczeń. Zamiast za każdym razem wpisywać 5 + 7 możesz po prostu stworzyć nową zmienną, do której przypiszesz wynik. 
  

- Class: text
  Output: 'Aby w R przypisać wartość do zmiennej wykorzystujemy operator przypisania, czyli po prostu symbol "mniej niż", a za nim znak "minusa". Wygląda to tak: <-'

- Class: text
  Output: Potraktuj operator przypisania jak strzałkę. Przypisujesz wartość po prawej stronie strzałki do nazwy zmiennej po lewej stronie strzałki. (P.S. W R jest też operator przypisania `=`, ale ma on mniejszy zakres działania. Jeśli jesteś ciekaw różnic, sprawdź ich opis w Internecie. Na razie stosuj po prostu <- ;))

- Class: cmd_question
  Output: Aby przypisać wynik 5 + 7 do nowej zmiennej o nazwie x wpisz x <- 5 + 7. Spróbuj teraz sam to zrobić.
  CorrectAnswer: x <- 5 + 7
  AnswerTests: any_of_exprs('x <- 5 + 7', 'x <- 7 + 5')
  Hint: Wpisz x <- 5 + 7. Ważne, aby pozostawić spację po każdej ze stron operatora przypisania, ale aby NIE UMIESZCZAĆ spacji pomiędzy `<` i `-`, które są częściami składowymi strzałki. 

- Class: text
  Output: Zauważ, że tym razem R nie wyświetliło wyniku 12. Kiedy korzystasz z operatora przypisania R zakłada, że nie chcesz zobaczyć wyniku od razu, ale że planujesz wykorzystać wynik do czegoś innego później. 

- Class: cmd_question
  Output: Aby zobaczyć treść zmiennej x, po prostu wpisz x i wciśnij Enter. Spróbuj teraz.
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr='x')
  Hint: Wpisz x i wciśniej Enter. Automatycznie wyświetli się wartość x. 

- Class: cmd_question
  Output: Teraz zapisz wynik x - 3 do nowej zmiennej o nazwie y.
  CorrectAnswer: y <- x - 3
  AnswerTests: omnitest(correctExpr='y <- x - 3')
  Hint: Wpisz y <- x - 3 i wciśnij Enter. Od Ciebie zależy czy użyjesz zapisu x - 3 czy x-3, ale dobrze wyrobić sobie nawyk wpisywania spacji po obu stronach operatora przypisania. 

- Class: cmd_question
  Output: Jaka jest wartość y? Aby się dowiedzieć, wpisz y. 
  CorrectAnswer: 'y'
  AnswerTests: omnitest(correctExpr='y')
  Hint: Wpisz y i wciśnij Enter.

- Class: text
  Output: Teraz stwórzmy mały zbiór liczb zwany wektorem. Każdy obiekt z danymi nazywamy strukturą danych, a wektory numeryczne są najprostszą strukturą danych w R. W rzeczywistości nawet pojedyncza liczba jest traktowana jako wektor o długości jeden (sic!).

- Class: cmd_question
  Output: Najprościej utworzyć wektor za pomocą funkcji c(), która oznacza połączenie, albo jak lubimy to spolszczać "konkatenację" (c, jak combine lub concatenate). Aby stworzyć wektor, który zawiera liczby 1.1, 9 i 3.14, wpisz c(1.1, 9, 3.14). Spróbuj to zrobić teraz i zapisz wynik do zmiennej o nazwie z.   
  CorrectAnswer: z <- c(1.1, 9, 3.14)
  AnswerTests: omnitest(correctExpr='z <- c(1.1, 9, 3.14)')
  Hint: Wprowadzenie z <- c(1.1, 9, 3.14) przypisze wektor (1.1, 9, 3.14) do nowej zmiennej o nazwie z. Nie jest wymagane, aby wpisać pojedyncze spacje po przecinkach w wektorze, ale sprawi to, że Twój kod będzie bardziej czytelny. 

- Class: cmd_question
  Output: UWAGA! UWAGA! Jeśli masz pytania na temat jakiejkowiek funkcji, możesz skorzystać z wbudowanej w R pomocy wpisując polecenie `?`. Na przykład, jeśli potrzebujesz więcej informacji na temat fukncji c(), wpisz ?c bez nawiasów, które normalnie występują po nazwie funkcji. Spróbuj. 
  CorrectAnswer: ?c
  AnswerTests: omnitest(correctExpr='?c')
  Hint: Wpisz ?c i wciśnij Enter, a pojawi się plik pomocy dla fukcji c().

- Class: cmd_question
  Output: Wpisz z, aby zobaczyć zawartość tej zmiennej. Zauważ, że wartości nie są odzielone przecinkami. 
  CorrectAnswer: z
  AnswerTests: omnitest(correctExpr='z')
  Hint: Wpisz z, aby zobaczyć jego zawartość.

- Class: cmd_question
  Output: Możesz połączyć kilka wektorów, aby stworzyć nowy wektor. Stwórz nowy wektor, który będzie zawierał, z, 555, a potem ponownie z, w tej kolejności. Nie przypisuj tego wektora do nowej zmiennej, aby można było od razu zobaczyć wynik.  
  CorrectAnswer: c(z, 555, z)
  AnswerTests: omnitest(correctExpr='c(z, 555, z)')
  Hint: Wpisz c(z, 555, z). Nie twórz nowej zmiennej. Chcemy tylko zobaczyć wynik. 

- Class: cmd_question
  Output: Wektory numeryczne mogą być używane w wyrażeniach arytmetycznych. Wpisz z * 2 + 100 i zobacz co się stanie.
  CorrectAnswer: z * 2 + 100
  AnswerTests: omnitest(correctExpr='z * 2 + 100')
  Hint: Wpisz z * 2 + 100 bez przypisywania wyniku do zmiennej. Symbol `*` używany jest do mnożenia.
    

- Class: text
  Output: Najpierw R pomnożył każdy z trzech elementów w z przez 2. Potem dodał 100 do każdego z nich, aby uzyskać wynik, który widzisz powyżej. 

- Class: text
  Output: Innymi powszechnymi arytmetycznymi operatorami są `+`, `-`, `/` i `^` (gdzie x^2
    oznacza 'x do potęgi 2'). Aby uzyskać pierwiastek, użyj funckji sqrt(). Aby dostać wartość bezwzględną użyj funkcji abs().

- Class: cmd_question
  Output: Oblicz pierwiastek kwadratowy z z - 1 i przypisz go do nowej zmiennej o nazwie my_sqrt.
  CorrectAnswer: my_sqrt <- sqrt(z - 1)
  AnswerTests: omnitest(correctExpr='my_sqrt <- sqrt(z - 1)')
  Hint: Przypisz wynik sqrt(z - 1) do zmiennej o nazwie my_sqrt.

- Class: mult_question
  Output: Zanim zobaczysz zawartość zmiennej my_sqrt, jak myślisz co zawiera? 
  CorrectAnswer: wektor od długości 3
  AnswerChoices: wektor od długości 3; pojedynczą liczbę (wektor o długości 1);
    wektor o długości 0 (pusty wektor)
  AnswerTests: omnitest(correctVal='wektor od długości 3')
  Hint: 'Pomyśl jak R poradziło sobie z innymi zwektoryzowanymi operacjami: element po elemencie.'

- Class: cmd_question
  Output: Wyświetl zawartość my_sqrt.
  CorrectAnswer: my_sqrt
  AnswerTests: omnitest(correctExpr='my_sqrt')
  Hint: Po prostu wpisz my_sqrt i wciśnij Enter, żeby wyświetlić jego wartość.

- Class: text
  Output: Jak pewnie podejrzewałeś, R najpierw odjął 1 od każdego elementu `z`, potem obliczył pierwiastek z każdego elementu. Otrzymałeś wektor o tej samej długości co oryginalny wektor `z`. 

- Class: cmd_question
  Output: Teraz, stwórz nową zmienną o nazwie my_div, która otrzyma wartość `z` podzieloną przez
     my_sqrt.
  CorrectAnswer: my_div <- z / my_sqrt
  AnswerTests: omnitest(correctExpr='my_div <- z / my_sqrt')
  Hint: Wpisz my_div <- z / my_sqrt. Nie są wymagane spacje po obu stronach znaku `/`, ale często sprawi to, że kod będzie bardziej czytelny. Niemniej jednak, jest to jedynie kwestia osobistych preferencji.


- Class: mult_question
  Output: Które stwierdzenie jest twoim zdaniem prawdziwe? 
  CorrectAnswer: Pierwszy element my_div jest równy pierwszemy elementowi `z` podzielonemu przez pierwszy element my_sqrt itd.
  AnswerChoices: Pierwszy element my_div jest równy pierwszemy elementowi `z` podzielonemu przez pierwszy element my_sqrt itd.; my_div jest pojedynczą liczbą (wektorem o długości 1); my_div jest niezdefiniowany
  AnswerTests: omnitest(correctVal='Pierwszy element my_div jest równy pierwszemy elementowi `z` podzielonemu przez pierwszy element my_sqrt itd.')
  Hint: Zastanów się jak R poradziło sobie z innymi "zwektoryzowanymi" operacjami takimi jak `+` i `*`.

- Class: cmd_question
  Output: Sprawdź to i wyświetl zawartość my_div.
  CorrectAnswer: my_div
  AnswerTests: omnitest(correctExpr='my_div')
  Hint: Wpisz my_div i wciśnij Enter, żeby zobaczyć jego zawartość.

- Class: text
  Output: Mając dwa wektory o tej samej długości R po prostu wykonuje określoną operację arytmetyczną (`+`, `-`, `*`, etc.) element po elemencie. Jeśli wektory są różnej długości, R przetwarza krótszy wektor póki osiągnię on długość dłuższego wektora.   

- Class: text
  Output: Kiedy w naszym poprzednim przykładzie wykonaliśmy z * 2 + 100, `z` był wektorem o długości 3, ale formalnie rzecz biorąc dwa pozostałe elementy, 2 i 100, są wektorami o długości 1.

- Class: text
  Output: 'Za kulisami R przetwarza 2 i 100, aby stworzyć wektory odpowiedniej długości. Innymi słowy, kiedy każesz R, aby obliczył z * 2 + 100, tak naprawdę oblicza co następuje: z * c(2, 2, 2) + c(100, 100, 100).'

- Class: cmd_question
  Output: Aby zobaczyć kolejny przykład przetwarzania wektorów, spróbuj dodać
    c(1, 2, 3, 4) i c(0, 10). Nie musisz zapisywać wyniku w nowej zmiennej. 
  CorrectAnswer: c(1, 2, 3, 4) + c(0, 10)
  AnswerTests: omnitest(correctExpr='c(1, 2, 3, 4) + c(0, 10)')
  Hint: Wpisz c(1, 2, 3, 4) + c(0, 10) w konsoli i zobacz jak R dodaje dwa wektory różnej długości. Nie przypisuj wyniku do zmiennej. 

- Class: text
  Output: Jeśli długość krótszego wektora nie dzieli się równo przez długość dłuższego wektora, R nadal będzie stosował metodę przetwarzania, ale wyśle Ci ostrzeżenie, że coś może być nie tak.  

- Class: cmd_question
  Output: Wypróbuj c(1, 2, 3, 4) + c(0, 10, 100) jako przykład.
  CorrectAnswer: c(1, 2, 3, 4) + c(0, 10, 100)
  AnswerTests: omnitest(correctExpr='c(1, 2, 3, 4) + c(0, 10, 100)')
  Hint: Wpisz c(1, 2, 3, 4) + c(0, 10, 100) i zobacz jak R radzi sobie z dodawaniem dwóch wektorów, kiedy długość krótszego z nich nie dzieli się równo, by osiągnąć długość dłuższego wektora. Nie musisz zapisywać wyniku do nowej zmiennej.

- Class: text
  Output: Na koniec pokażę Tobie kilka trików, które pozwolą Ci zaoszczędzić czas.

- Class: text
  Output: Wcześniej obliczałeś z * 2 + 100. Poudawajmy przez chwilę, że popełniłeś błąd i że chciałeś dodać 1000 zamiast 100. Możesz albo wpisać wyrażenie od nowa albo...
 

- Class: cmd_question
  Output: W wielu środowiskach programistycznych strzałka w górę będzie przelatywać przez poprzednie polecenia. Spróbuj wciskać strzałkę w górę na klawiaturze, póki nie dojedziesz do polecenia (z * 2 + 100), potem zmień 100 na 1000 i wciśnij Enter. Jeśli z jakiegoś powodu nie działa strzałka w górę, po prostu wpisz poprawione polecenie. 
  CorrectAnswer: z * 2 + 1000
  AnswerTests: omnitest(correctExpr='z * 2 + 1000')
  Hint: Jeśli w twoim środowisku nie działa strzałka w górę, wpisz po prostu poprawione polecenie.

- Class: text
  Output: Na koniec załóżmy, że chciałbyś wyświetlić zawartość zmiennej, którą wcześniej utworzyłeś, ale nie pamiętasz czy nazwałeś ją my_div czy myDiv. Możesz wypróbować oba, żeby zobaczyć co działa albo... 

- Class: text
  Output: Możesz wpisać pierwsze dwie litery nazwy zmiennej, potem wcisnąć Tab (możliwe, że więcej niż jeden raz). Większość środowisk programistycznych wyświetli listę zmiennych, które stworzyłeś, zaczynających się od 'my'. Nazywamy to autouzupełnianiem i może się przydać kiedy w swojej przestrzeni roboczej będziesz miał wiele zmiennych. (P.S. Dla fanów IDE do praktycznie wszystkich języków programowania, w RStudio powinien też działać skrót Ctrl+Spacja ;))
  
- Class: cmd_question
  Output: Teraz spróbuj sam. (Jeśli nie lubisz autouzupełniania, po prostu wpisz my_div i wciśnij Enter.)
  CorrectAnswer: my_div
  AnswerTests: omnitest(correctExpr='my_div')
  Hint: Jeśli w twoim środowisku programistycznym autouzupełnianie nie działa dobrze, po prostu wpisz my_div i wciśnij Enter.
