- Class: meta
  Course: Programowanie w R
  Lesson: Przegladanie danych
  Author: Nick Carchedi, Dariusz Brzeziński
  Type: Standard
  Organization: JHU Biostat, Poznan University of Technology
  Version: 1.0.0

- Class: text
  Output: Za każdym razem kiedy pracujesz z nowym zbiorem danych, najpierw powinieneś się jemu przyjrzeć! W jakim formacie są dane? Jakie są wymiary? Jakie są nazwy zmiennych? Jak zapisane są zmienne? Czy są brakujące wartości? Czy są jakieś błędy w danych?

- Class: text
  Output: W ramach tej lekcji nauczysz się jak znaleźć odpowiedzi na te i inne pytania wykorzystując wbudowane w R funkcje. Będziemy korzystać ze zbioru danych stworzonego z bazy danych PLANTS Departamentu Rolnictwa Stanów Zjednoczonych. (http://plants.usda.gov/adv_search.html).

- Class: cmd_question
  Output: Dane zgromadziłem dla Ciebie w zmiennej o nazwie plants. Wpisz ls(), aby zobaczyć listę zmiennych w swojej przestrzeni roboczej, pośród których powinna być zmienna plants.  
  CorrectAnswer: ls()
  AnswerTests: omnitest(correctExpr='ls()')
  Hint: Użyj ls(), aby wyświetlić listę zmiennych w swojej przestrzeni roboczej.

- Class: cmd_question
  Output: Zacznijmy od sprawdzenia klasy zmiennej plants za pomocą class(plants). To podpowie nam jak całościowo wygląda struktura danych. 
  AnswerTests: omnitest(correctExpr='class(plants)')
  Hint: Użyj class(plants), żeby sprawdzić klasę zmiennej plants. 

- Class: text
  Output: Dane zazwyczaj są gromadzone w data frame'ach. Jest to domyślna klasa dla danych wczytywanych w R przy użyciu takich funkcji jak read.csv() czy read.table(), o których dowiesz sie w czasie kolejnej lekcji.

- Class: cmd_question
  Output:  Wiemy, że skoro zbiór danych jest zapisany w data frame'ie, to jest tabelaryczny. Innymi słowy, ma dwa wymiary (wiersze i kolumny) i idealnie wpasowuje się w tabelę bądź arkusz kalkulacyjny. Wpisz dim(plants), aby zobaczyć dokładnie ile jest wierszy i kolumn.
  CorrectAnswer: dim(plants)
  AnswerTests: omnitest(correctExpr='dim(plants)')
  Hint: Wpisz dim(plants), aby zobaczyć dokładne wymiary zbioru danych plants. 

- Class: text
  Output: Pierwsza liczba, którą widzisz (5166) jest liczbą wierszy (przykładów), zaś druga (10) to liczba kolumn (zmiennych). 

- Class: cmd_question
  Output: Możesz także użyć nrow(plants), aby zobaczyć jedynie liczbę wierszy. Spróbuj. 
  CorrectAnswer: nrow(plants)
  AnswerTests: omnitest(correctExpr='nrow(plants)')
  Hint: Wpisz nrow(plants), aby zobaczyć jedynie liczbę wierszy. 

- Class: cmd_question
  Output: ... i ncol(plants), aby zobaczyć jedynie liczbę kolumn.
  CorrectAnswer: ncol(plants)
  AnswerTests: omnitest(correctExpr='ncol(plants)')
  Hint: Wpisz ncol(plants), aby zobaczyć jedynie liczbę kolumn.

- Class: cmd_question
  Output: Jeśli jesteś ciekaw ile zbiór danych zajmuje miejsca w pamięci, wpisz object.size(plants).
  CorrectAnswer: object.size(plants)
  AnswerTests: omnitest(correctExpr='object.size(plants)')
  Hint: object.size(plants) powie Ci ile pamięci zajmuje data frame plants.  

- Class: cmd_question
  Output: Mając już obraz tego jaki kształt i rozmiar ma zbiór danych, przyjrzyjmy się co znajduje się w środku. Wpisz names(plants), a pojawi się wektor tekstowy nazw kolumn (tj. zmiennych). 
  CorrectAnswer: names(plants)
  AnswerTests: omnitest(correctExpr='names(plants)')
  Hint: Wpisz names(plants), a pojawi się wektor tekstowy nazw kolumn (tj. zmiennych).

- Class: text
  Output: Nadaliśmy temu zbiorowi danych dosyć opisowe nazwy zmiennych, ale nie zawsze będzie to możliwe. Kolejnym logicznym krokiem jest spojrzenie na same dane. Nasz zbiór danych zawiera 5000 przykładów (wierszy), więc wyświetlenie całości na raz jest niepraktyczne. 
  
- Class: cmd_question
  Output: Funkcja head() pozwala podejrzeć początek zbioru danych. Wypróbuj head() podając tylko jeden parametr. 
  CorrectAnswer: head(plants)
  AnswerTests: omnitest(correctExpr='head(plants)')
  Hint: head(plants) wyświetli początek zbioru danych.

- Class: text
  Output: Poświęć chwilę, aby przejrzeć i zrozumieć powyższy wynik. Każdy wiersz ma etykietę okreslającą numer przykładu, a każda kolumna etykietę określającą nazwę zmiennej. Prawdopodobnie nie masz wystraczająco szerokiego ekranu, aby wyświetlić wszystkie 10 kolumn obok siebie, dlatego R wyświetla tyle kolumn ile może w każdej linii, zanim przejdzie do kolejnej zmiennej. 

- Class: cmd_question
  Output:  head() domyślnie pokaże Ci sześć wierszy danych. Możesz zmienić to działanie przekazując jako drugi argument liczbę wierszy jaką chciałbyś wyświetlić. Wywołaj head() tak, aby wyświetlić pierwsze 10 wierszy zbioru plants. 
  CorrectAnswer: head(plants, 10)
  AnswerTests: omnitest(correctExpr='head(plants, 10)')
  Hint: head(plants, 10) wyświetli pierwsze 10 wierszy zbioru danych.

- Class: cmd_question
  Output: Tak samo działa wpisanie tail(), aby wyświetlić koniec zbioru danych. Wywołaj tail() tak, aby wyświetlić ostatnie 15 wierszy. 
  CorrectAnswer: tail(plants, 15)
  AnswerTests: omnitest(correctExpr='tail(plants, 15)')
  Hint: tail(plants, 15) wyświetli ostatnie 15 wierszy zbioru danych.  

- Class: cmd_question
  Output: Po wyświetleniu początku i końca zbioru danych pewnie zauważyłeś mnóstwo wartości NA. Wpisz summary(plants), aby lepiej zobaczyć jaki rozkład ma każda zmienna i ile jest brakujących wartości. 
  CorrectAnswer: summary(plants)
  AnswerTests: omnitest(correctExpr='summary(plants)')
  Hint: Wpisz summary(plants), aby zobaczyć jaki rozkład ma każda zmienna i z iloma brakującymi wartościami mamy do czynienia. 

- Class: text
  Output: summary() zwraca inny wynik dla każdej zmiennej, w zależności od klasy. Dla danych numerycznych takich jak Precip_Min, summary() pokazuje minimum, pierwszy kwartyl, medianę, średnią, trzeci kwartyl i maksimum. Wartości te pomagają nam zrozumieć jaki rozkład mają dane.  

- Class: text
  Output: Dla zmiennych nominalnych (zwanych w R 'factor' variables), summary() pokazuje liczbę okreslającą ile razy każda wartość ('level') pojawia się w zbiorze danych. Na przykład, każda wartość Scientific_Name pojawia się tylko raz, gdyż odnosi się jedynie do określonej rośliny. Summary dla Duration (również zmienna nominalna) mówi nam zaś, że nasz zbiór danych zawiera 3031 roślin wieloletnich (ang. Perennial plants), 682 rośliny jednoroczne (ang. Annual plants), itd.   

- Class: cmd_question
  Output: Jak widać R skróciło wynik dla Active_Growth_Period dodając obejmującą wszystko kategorię 'Other'. Jest to zmienna nominalna, więc możemy zobaczyć ile razy każda wartość tak naprawdę pojawia się w zbiorze danych za pomocą wyrażenia table(plants$Active_Growth_Period).
  CorrectAnswer: table(plants$Active_Growth_Period)
  AnswerTests: omnitest(correctExpr='table(plants$Active_Growth_Period)')
  Hint: table(plants$Active_Growth_Period) wyświetli liczbę dla każdej wartości zmiennej nominalnej. 

- Class: text
  Output: Każda z funkcji, którą do tej pory wprowadziliśmy pomaga lepiej zrozumieć zbiór danych. Najlepsze zachowaliśmy jednak na koniec...  

- Class: cmd_question
  Output: Prawdopodobnie najbardziej przydatną i zwięzłą funkcją, która pomoże zrozumieć ci  *str*ukturę danych jest str(). Wypróbuj ją teraz. 
  CorrectAnswer: str(plants)
  AnswerTests: omnitest(correctExpr='str(plants)')
  Hint: Wpisz str(plants), by zobaczyć strukturę zbioru danych. 

- Class: text
  Output: Piękno str() polega na tym, że łączy wiele cech innych funkcji, dając jednocześnie zwięzły i czytelny wynik. Na samej górze widzimy, że zmienna plants jest typu 'data.frame' i że posiada 5166 przykładów i 10 zmiennych. Następnie, podaje nam nazwę i klasę każdej zmiennej, jak również pokazuje nam podgląd zawartości. 

- Class: text
  Output: str() jest tak naprawdę bardzo ogólną funkcją, którą możesz wywołać na większości obiektów w R. Kiedy tylko chcesz zrozumieć strukturę czegoś (zbioru danych, funkcji itd.) zacznij od str(). P.S. Zauważyłeś jak wygląda zawartość zakładki Environment w prawym górnym rogu RStudio? Próbowałeś rozwinąć plants?

- Class: text
  Output: W tej lekcji nauczyłeś się jak ocenić strukturę i treść nowego zbioru danych korzystając z całej kolekcji prostych i przydatnych funkcji. Zrobienie tego od razu może pomóc Ci zaoszczędzić czas i frustrację później w czasie analizy danych.  
