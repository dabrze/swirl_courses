- Class: meta
  Course: Programowanie w R
  Lesson: Wektory
  Author: Nick Carchedi, Dariusz Brzeziński
  Type: Standard
  Organization: JHU Biostat, Poznan University of Technology
  Version: 1.0.0

- Class: text
  Output: Najprostszą i najczęściej wykorzystywaną strukturą danych w R jest wektor.

- Class: text
  Output: 'Wektory występują w dwóch wersjach: wektorów (podstawowych) (ang. atomic vectors)
    i list (ang. lists). Wektor zawiera dokładnie jeden typ danych, podczas gdy listy
    mogą przechowywać wiele różnych typów. Poznamy właściwości wektorów zanim przejdziemy do list'

- Class: text
  Output: W poprzedniej lekcji zajmowaliśmy się wyłącznie wektorami liczbowymi, które
    są jednym z typów wektorów podstawowych. Inne typy wektorów podstawowych to
    wektory logiczne, tekstowe czy złożone. W ramach tej lekcji skupimy się na wektorach
    tekstowych i logicznych.

- Class: text
  Output: Wektory logiczne mogą przechowywać elementy o jednej z trzech wartości
    TRUE, FALSE i NA (od 'not available'). Te wartości są z reguły wynikiem
    jakichś warunków logicznych. Poeksperymentujmy z prostymi warunkami.

- Class: cmd_question
  Output: Najpierw stwórzmy wektor liczbowy num_vect zawierający wartości 0.5, 55, -10, i 6.
  CorrectAnswer: num_vect <- c(0.5, 55, -10, 6)
  AnswerTests: omnitest(correctExpr='num_vect <- c(0.5, 55, -10, 6)')
  Hint: Pamiętaj, że funkcja c() służy do tworzenia wektora. Jeśli nie pamiętasz jak jej użyć, wpisz ?c, aby otworzyć pomoc. Nie zapomnij przypisać wyniku do nowej zmiennej o nazwie num_vect.

- Class: cmd_question
  Output: Teraz stwórz zmienną o nazwie tf, do której przypiszesz num_vect < 1, czyli 'num_vect mniejsze od 1'.
  CorrectAnswer: tf <- num_vect < 1
  AnswerTests: omnitest(correctExpr='tf <- num_vect < 1')
  Hint: Wpisz tf <- num_vect < 1 , aby przypisać wynik num_vect < 1 do zmiennej
    o nazwie tf.

- Class: mult_question
  Output: Jak myślisz, jak będzie wyglądała zmienna tf?
  CorrectAnswer: wektor 4 wartości logicznych
  AnswerChoices: wektor 4 wartości logicznych; pojedyncza wartość logiczna
  AnswerTests: omnitest(correctVal='wektor 4 wartości logicznych')
  Hint: Pamiętaj, że lekcja dotyczy wektorów. Większość operacji na wektorach R 
    wykonuje element po elemencie.

- Class: cmd_question
  Output: Teraz wypisz zawartość zmiennej tf.
  CorrectAnswer: tf
  AnswerTests: omnitest(correctExpr='tf')
  Hint: Po prostu wpisz tf i wciśnij Enter.

- Class: text
  Output: Wyrażenie num_vect < 1 to warunek a tf pokazuje nam, które elementy
    wektora liczbowego spełniają ten warunek.

- Class: text
  Output: Pierwszym elementem jest wartość 0.5, która jest mniejsza od 1 i dlatego
    wyrażenie 0.5 < 1 ma wartość TRUE. Drugi element num_vect to 55, 55 jest większe
    od 1, więc 55 < 1 zwraca FALSE. I tak dalej dla trzeciego i czwartego elementu wektora.

- Class: cmd_question
  Output: Spróbujmy jeszcze raz. Wpisz num_vect >= 6 bez przypisywania wyniku do żadnej zmiennej.
  CorrectAnswer: num_vect >= 6
  AnswerTests: omnitest(correctExpr='num_vect >= 6')
  Hint: W odpowiedzi na to pytanie nie twórz żadnej zmiennej. Chcemy po prostu zobaczyć wynik wyrażenia
    num_vect >= 6.

- Class: text
  Output: Tym razem pytaliśmy o to czy elementy wektora num_vect są większe lub równe 6. 
    Wynik zmienił się stosownie do wartości w wektorze.

- Class: text
  Output: Jak się domyślasz oprócz operatorów `<` i `>=` do warunków logicznych
    możesz wykorzystać także symbole `>`, `<=`, `==`, `!=`.

- Class: text
  Output: Jeśli mamy dwa wyrażenia logiczne, A i B, możemy je połączyć za pomocą
    operatorów OR (A | B) i AND (A & B). Ponadto, do dyspozycji masz także operator
    negacji (!A).

- Class: text
  Output: To powinna być formalność, ale przećwiczmy kilka wyrażeń logicznych. Podaj
    wynik następujących operacji.

- Class: mult_question
  Output: (3 > 5) & (4 == 4)
  CorrectAnswer: 'FALSE'
  AnswerChoices: TRUE; FALSE
  AnswerTests: omnitest(correctVal='FALSE')
  Hint: ...

- Class: mult_question
  Output: (TRUE == TRUE) | (TRUE == FALSE)
  CorrectAnswer: 'TRUE'
  AnswerChoices: TRUE; FALSE
  AnswerTests: omnitest(correctVal='TRUE')
  Hint: ...

- Class: mult_question
  Output: ((111 >= 111) | !(TRUE)) & ((4 + 1) == 5)
  CorrectAnswer: 'TRUE'
  AnswerChoices: TRUE; FALSE
  AnswerTests: omnitest(correctVal='TRUE')
  Hint: ...

- Class: text
  Output: 'OK, jak już to mamy za sobą, to warto wspomnieć, że są jeszcze dwa operatory
    logiczne: A || B i A && B. Podobnie jak w innych językach programowania "podwójne"
    operatory AND i OR kończą swoją pracę jak tylko znają wynik. Pojedyncze operatory
    wywołują i sprawdzają wszystkie wyrażenia. Oznacza to zupełnie inny wynik przy
    warunkach opartych na wektorach. Oznacza to również, że "podwójne" operatory przydadzą
    nam się przy "ifach" ale nie przy np. filtrowaniu wektorów.'

- Class: text
  Output: 'Przejdźmy do wektorów tekstowych (ang. character vectors). Łańcuchy znaków, potocznie
  zwane przez nas stringami, trzymane są w R w zmiennych typu character. Aby stworzyć takie zmienne
  korzystamy z tzw. "ciapek" (nomenklatura prowadzącego). Ciapki mogą być pojedyncze ('' - apostrof)
  lub podwójne (" - cudzysłów). Obie wersje zadziałają, ale preferowane w R są podwójne ciapki.'

- Class: cmd_question
  Output: 'Stwórz wektor tekstowy składający się z następujących słów: "Mam", "na",
    "imię". Użyj podwójnych ciapek. Zapisz wynik do zmiennej my_char.'
  CorrectAnswer: my_char <- c("Mam", "na", "imię")
  AnswerTests: omnitest(correctExpr='my_char <- c("Mam", "na", "imię")')
  Hint: Wpisz my_char <- c("Mam", "na", "imię") aby stworzyć nową zmienną my_char, która przechowuje wektor tekstowy o długości 3.

- Class: cmd_question
  Output: Wypisz zawartość my_char na konsolę.
  CorrectAnswer: my_char
  AnswerTests: omnitest(correctExpr='my_char')
  Hint: Wpisz my_char, aby sprawdzić zawartość tej zmiennej.

- Class: text
  Output: W tej chwili my_char jest wektorem tekstowym o długości 3. Powiedzmy, że
    chcemy połączyć elementy tego wektora w pojedynczy łańcuch znaków (wektor o długości 1). Przyda 
    nam się do tego funkcja paste().

- Class: cmd_question
  Output: Wpisz paste(my_char, collapse = " "). Upewnij się, że w argumencie collapse jest spacja między cudzysłowami. Zaraz zobaczysz dlaczego.
  CorrectAnswer: paste(my_char, collapse = " ")
  AnswerTests: omnitest(correctExpr='paste(my_char, collapse = " ")')
  Hint: Wpisz paste(my_char, collapse = " "), aby połączyć elementy wektora w zdanie.

- Class: text
  Output: Argument `collapse` funkcji paste() mówi R jak chcemy połączyć elementy
    znajdujące się w wektorze my_char. Tu powiedzieliśmy, że chcemy je skleić spacjami.

- Class: text
  Output: Wygląda jakbyśmy o czymś zapomnieli.... No tak! Imię!

- Class: cmd_question
  Output: 'Aby dodać imię na koniec my_char, uzyj
    funkcji c() w ten sposób: c(my_char, "Twoje imię"). Spróbuj to zrobić i przypisz wynik do nowej 
    zmiennej o nazwie my_name.'
  CorrectAnswer: my_name <- c(my_char, "Swirl")
  AnswerTests: var_is_a("character", "my_name"); expr_uses_func("c"); expr_creates_var("my_name");
    val_has_length(4)
  Hint: Doklej swoje imię na koniec wektora my_char za pomocą funkcji c(). Upewnij się, że
    przypisałeś wynik do zmiennej o nazwie my_name. Jeśli miałbyś na imię "Swirl",
    wpisałbyś my_name <- c(my_char, "Swirl").

- Class: cmd_question
  Output: Przyjrzyj się zawartości my_name.
  CorrectAnswer: my_name
  AnswerTests: omnitest(correctExpr='my_name')
  Hint: Wpisz my_name i wciśnij Enter.

- Class: cmd_question
  Output: Użyj teraz funkcji paste(), aby skleić zawartość wektora my_name w
   jeden łańcuch znaków. Nie zapomnij dodać collapse = " "!
  CorrectAnswer: paste(my_name, collapse = " ")
  AnswerTests: omnitest(correctExpr='paste(my_name, collapse = " ")')
  Hint: Użyj paste(my_name, collapse = " "), aby połączyć wszystkie cztery słowa za pomocą spacji.

- Class: text
  Output: Tutaj wykorzystaliśmy funkcję paste(), aby złożyć elemeny wektora. 
    Funkcję paste() można także wykorzystać do łączenia elementów wielu wektorów.

- Class: cmd_question
  Output: W najprostszym przypadku, możemy połączyć dwa wektory tekstowe, każdy o
    długości 1. Wpisz paste("Hello", "world!", sep = " "), gdzie
    argument `sep` mówi R że chcemy rozdzielić elementy pojedynczą spacją.
  CorrectAnswer: paste("Hello", "world!", sep = " ")
  AnswerTests: omnitest(correctExpr='paste("Hello", "world!", sep = " ")')
  Hint: Wpisz paste("Hello", "world!", sep = " "), aby połączyć słowa (wektory) "Hello" i
    "world" spacją.

- Class: cmd_question
  Output: Aby pokazać trochę bardziej skomplikowane zastosowanie, połączymy dwa wektory, oba o
    długości 3. Użyj paste(), aby połączyć wektor liczb 1:3 z wektorem tekstowym c("X", "Y", "Z"). Tym razem argument sep
    = "", aby nie wprowadzać spacji między elementami.
  CorrectAnswer: paste(1:3, c("X", "Y", "Z"), sep = "")
  AnswerTests: any_of_exprs('paste(1:3, c("X", "Y", "Z"), sep = "")', 'paste(c(1:3), c("X", "Y", "Z"), sep = "")')
  Hint: Wpisz paste(1:3, c("X", "Y", "Z"), sep = "") i zobacz co się stanie, gdy połączymy
    dwa wektory równej długości za pomocą paste().

- Class: text
  Output: Jak myślisz, co się stanie gdy połączysz dwa wektory różnej długości?

- Class: cmd_question
  Output: Reiteracja! Wpisz paste(LETTERS, 1:4, sep = "-") i zobacz co się stanie.
    LETTERS to predefiniowana zmienna w R, która zawiera wektor tekstowy 26 liter angielskiego alfabetu.
  CorrectAnswer: paste(LETTERS, 1:4, sep = "-")
  AnswerTests: omnitest(correctExpr='paste(LETTERS, 1:4, sep = "-")')
  Hint: Wpisz paste(LETTERS, 1:4, sep = "-"), aby zobaczyć jak R reiteruje wektor 1:4, żeby dopasować
    się do dlugości zmiennej LETTERS. Zwróć uwagę, że tym razem używamy `-` jako separatora.

- Class: text
  Output: Ponieważ wektor tekstowy LETTERS jest dłuższy niż wektor liczbowy 1:4,
    R reiteruje 1:4 aż dopasuje się do długości zmiennej LETTERS.

- Class: text
  Output: Warto też zauważyć, że wektor 1:4 jest niejawnie rzutowany na wektor tekstowy
    przez funkcję paste().

- Class: text
  Output: Rzutowania omówimy w ramach innej lekcji ;).

