- Class: meta
  Course: Programowanie w R
  Lesson: lapply i sapply
  Author: Nick Carchedi, Dariusz Brzezinski
  Type: Standard
  Organization: JHU Biostat, Poznan University of Technology
  Version: 1.0.0

- Class: text
  Output: W ramach tej lekcji poznasz dwie bardzo ważne funkcje z rodziny *apply: lapply() i sapply().

- Class: text
  Output: Te bardzo przydatne funkcje, wraz z m.in. vapply() i tapply(), pozwalają w prosty i zwięzły sposób implementować startegią Split-Apply-Combine (takie trochę mniej ogólne Map-Reduce dla analizy danych).

- Class: text
  Output: Każda z funkcji z rodziny *apply dzieli dane na mniejsze porcje (SPLIT), wykonuje wskazaną funkcję na każdym fragmencie (APPLY), a na koniec łączy wyniki (COMBINE). Więcej informacji na temat tej strategii można znaleźć w artykule Hadley Wickhama (<- kozak w świecie R!) 'The Split-Apply-Combine Strategy for Data Analysis'.

- Class: text
  Output: "Przez całą lekcję będziemy korzystać ze zbioru Flags z UCI Machine Learning Repository. Zbiór ten opisuje informacje o krajach i ich flagach. Więcej informacji o tym zbiorze można znaleźć pod adresem: http://archive.ics.uci.edu/ml/datasets/Flags"

- Class: text
  Output: Koniec gadania! Zacznijmy wreszcie klepać!

- Class: cmd_question
  Output: Zapisałem zbiór danych do zmiennej flags. Wpisz head(flags), aby obejrzeć pierwsze sześć wierszy tego zbioru.
  CorrectAnswer: head(flags)
  AnswerTests: omnitest(correctExpr='head(flags)')
  Hint: Wpisz head(flags), aby podejrzeć początek zbioru.

- Class: cmd_question
  Output: Być może będziesz musiał przewinąć ekran konsoli, aby zobaczyć cały wynik. Teraz sprawdźmy wyniary zbioru za pomocą wyrażenia dim(flags).
  CorrectAnswer: dim(flags)
  AnswerTests: omnitest(correctExpr='dim(flags)')
  Hint: Wpisz dim(flags), aby zobaczyć wymiary zbioru.

- Class: text
  Output: Wynik mówi nam, że flags ma 194 wierszy (obserwacji, przykładów, instancji) i 30 kolumn (zmiennych, atrybutów). Każdy przykład oznacza kraj a każdy atrybut opisuje cechy charakterystyczne kraju lub jego flagi. Bardziej szczegółowy opis zbioru będzie dostępny w trakcie lekcji po wpisaniu viewinfo() w konsoli (>).

- Class: cmd_question
  Output: Na początku pracy z każdym zbiorem danych jesteśmy zainteresowani w jakiego typu jest każda ze zmiennych. Innymi słowy, interesuje nas atrybut 'class' każdej zmiennej? Co się stanie jak wywołamy class(flags)? Sprawdź to.
  CorrectAnswer: class(flags)
  AnswerTests: omnitest(correctExpr='class(flags)')
  Hint: Wpisz class(flags), aby zobaczyć co się stanie.

- Class: text
  Output: Wynik mówi nam, że zmienna flags jest typu 'data.frame' i nie odpowiada na nasze pytanie. Tak naprawdę chcemy wywołać funkcję class() na każdej kolumnie z osobna. Choć możemy to zrobić ręcznie (dla każdej kolumny po kolei) znacznie szybciej wykona to pętla!

- Class: text
  Output: Funkcja lapply() pobiera jako wejście listę, wywołuje wskazaną funckję na każdym elemencie listy, a na koniec zwraca listę o takiej samej długości jak lista wejściowa. Ponieważ data frame jest tak naprawdę listą wektorów (możesz sprawdzić to wpisując as.list(flags)), możemy wywołać lapply(), aby wykonać funkcję class() na każdej kolumnie zbioru flags.

- Class: cmd_question
  Output: Wpisz cls_list <- lapply(flags, class), aby wykonać funkcję class() na każdej kolumnie zbioru flags i zapisać wynik do zmiennej cls_list. Zwróć uwagę, że jako argument przekazujesz tylko nazwę funkcji (class), bez nawiasów.
  CorrectAnswer: cls_list <- lapply(flags, class)
  AnswerTests: omnitest(correctExpr='cls_list <- lapply(flags, class)')
  Hint: Wpisz cls_list <- lapply(flags, class), aby wykonać funkcję class() na każdej kolumnie zbioru flags i zapisać wynik do zmiennej cls_list.

- Class: cmd_question
  Output: Wpisz cls_list, aby zobaczyć wynik.
  CorrectAnswer: cls_list
  AnswerTests: omnitest(correctExpr='cls_list')
  Hint: Wpisz cls_list, aby zobaczyć wynik.

- Class: cmd_question
  Output: Litera 'l' w 'lapply' wzięła się od słowa 'list'. Wpisz class(cls_list), aby potwierdzić, że funkcja lapply() zwróciła listę.
  CorrectAnswer: class(cls_list)
  AnswerTests: omnitest(correctExpr='class(cls_list)')
  Hint: Wpisz class(cls_list), aby potwierdzić, że funkcja lapply() zwróciła listę.

- Class: text
  Output: Tak się spodziewaliśmy, dostaliśmy listę 30 elementów, gdzie każdy element odpowiada kolejnej kolumnie zbioru flags. Wynik byłby znacznie bardzie zwięzły i przyjazny gdybyśmy otrzymali wektor zamiast listy.

- Class: cmd_question
  Output: Jak pewnie kojarzysz z poprzednich lekcji, listy są najbardziej przydatne w sytuacjach, gdy chcemy przechować razem dane różnych typów. W tym przypadku każdy element listy jest wektorem tekstowym o długości jeden i cls_list może zstać uproszczony do wektora tesktowego. Aby zrobić to ręcznie, wpisz as.character(cls_list).
  CorrectAnswer: as.character(cls_list)
  AnswerTests: omnitest(correctExpr='as.character(cls_list)')
  Hint: Wpisz as.character(cls_list), aby rzutować cls_list na wektor tekstowy.

- Class: cmd_question
  Output: sapply() pozwala zautomatyzować ten proces wywołując lapply(), a następnie próbując uprościć wynik ('s' w 'sapply' bierze się od 'simplify'). Użyj sapply() tak samo jak uzyłeś lapply(), aby dostać klasę każdej kolumny zbioru flags i zapisz wynik do zmiennej cls_vect. W razie problemów wpisz ?sapply, aby zapoznać się z dokumentacją.
  CorrectAnswer: cls_vect <- sapply(flags, class)
  AnswerTests: omnitest(correctExpr='cls_vect <- sapply(flags, class)')
  Hint: Wpisz cls_vect <- sapply(flags, class), aby zapisać klasę każdej kolumny zbioru flags do wektora cls_vect.

- Class: cmd_question
  Output: Wpisz class(cls_vect), aby potwierdzić, że funkcja sapply() uprościła wynik.
  CorrectAnswer: class(cls_vect)
  AnswerTests: omnitest(correctExpr='class(cls_vect)')
  Hint: Wpisz class(cls_vect)aby potwierdzić, że funkcja sapply() zwróciła wektor tekstowy.

- Class: text
  Output: Jeśli wynik jest listą gdzie każdy element ma długość jeden, sapply() zwraca wektor. Jeśli wynikiem jest lista gdzie każdy element jest wektorem o tej samej długości (> 1), sapply() zwraca macierz. Jeśli sapply() nie może poradzić sobie z uproszczeniem, zwraca listę identyczną do tej jaką zwróciłaby funkcja lapply().

- Class: text
  Output: Poćwiczmy jeszcze trochę wykorzystanie funkcji lapply() i sapply()!

- Class: text
  Output: Kolumny 11-17 są zmiennymi binarnymi oznaczającymi rożne kolory. Wartość 1 oznacza, że dany kolor występuje w fladze, 0 że nie występuje.

- Class: cmd_question
  Output:  Zatem jeśli chcemy poznać łączną liczbę krajów z np. kolorem pomarańczowym we fladze, możemy po prostu podsumować zera i jedynki w kolumnie 'orange'. Wypróbuj wyrażenie sum(flags$orange).
  CorrectAnswer: sum(flags$orange)
  AnswerTests: omnitest(correctExpr='sum(flags$orange)')
  Hint: Użyj wyrażenia sum(flags$orange), aby dodać zera i jedynki w kolumnie 'orange'.

- Class: text
  Output: Teraz spróbujemy powtórzyć tę operację dla każdego koloru w zbiorze danych.

- Class: cmd_question
  Output: Najpierw wykonaj polecenie flag_colors <- flags[, 11:17], aby wyciągnąć kolumny z kolorami i zapisać je w nowym data frame'ie o nazwie flag_colors. (Zwróć uwagę na przecinek przed 11:17. To polecenie filtrujące mówi R, że chcemy wszystkie wiersze, ale tylko dla kolumn od 11 do 17.)
  CorrectAnswer: flag_colors <- flags[, 11:17]
  AnswerTests: omnitest(correctExpr='flag_colors <- flags[, 11:17]')
  Hint: flag_colors <- flags[, 11:17] załatwi sprawę!

- Class: cmd_question
  Output: Użyj funkcji head(), aby podejrzeć 6  pierwszych wierszy zmiennej flag_colors.
  CorrectAnswer: head(flag_colors)
  AnswerTests: omnitest(correctExpr='head(flag_colors)')
  Hint: head(flag_colors) wyświetli 6 pierwszych wierszy flag_colors.

- Class: cmd_question
  Output: Aby dostać listę zawierającą sumę każdej kolumny flag_colors, wywołaj lapply() z dwoma argumentami. Pierwszy argument to obiekt, po którrym chcemy wykonać pętlę (tutaj flag_colors), a drugi argument to nazwa funkcji, którą chcemy wywołać na każdej kolumnie (tutaj sum).
  CorrectAnswer: lapply(flag_colors, sum)
  AnswerTests: omnitest(correctExpr='lapply(flag_colors, sum)')
  Hint: Użyj lapply(flag_colors, sum), aby dostać sumę każdej kolumny.

- Class: text
  Output: Widzimy, że zbiór danych reprezentuje 194 flagi, 153 zawierają kolor czerwony, 91 zielony, 99 niebieski, i tak dalej.

- Class: cmd_question
  Output: Rezultatem jest lista, ponieważ lapply() zawsze zwraca listę. Każdy element wynikowej listy ma długość 1, więc wynik powinno dać się uprościć wywołując sapply() zamiast lapply(). Spróbuj to zrobić teraz.
  CorrectAnswer: sapply(flag_colors, sum)
  AnswerTests: omnitest(correctExpr='sapply(flag_colors, sum)')
  Hint: Użyj sapply(flag_colors, sum), aby zwrócić wektor zamiast listy.

- Class: text
  Output: Może lepiej by było poznać ułamek flag (ze 194) zawierających dany kolor. Ponieważ każda kolumna to zbiór zer i jedynek, średnia arytmetyczna powinna zwrócić proporcję jedynek w danej kolumnie.

- Class: cmd_question
  Output: Użyj sapply() i oblicz średnią każdej kolumny flag_colors.
  CorrectAnswer: sapply(flag_colors, mean)
  AnswerTests: omnitest(correctExpr='sapply(flag_colors, mean)')
  Hint: sapply(flag_colors, mean) powinno załatwić sprawę!

- Class: text
  Output: W rozważanych do tej pory przykładach sapply() było w stanie uprościć wynik do wektora. Działo się tak ponieważ wszystkie lementy list wynikowych były wektorami o długości 1. Jednak sapply() potrafi też zwracać macierze, gdy elementy listy wynikowej są dłuższe (> 1).

- Class: cmd_question
  Output: Aby to zobrazować, wyodrębnijmy ze zbioru flags kolumny od 19 do 23 i przypiszmy je do zmiennej flag_shapes.
  CorrectAnswer: flag_shapes <- flags[, 19:23]
  AnswerTests: omnitest(correctExpr='flag_shapes <- flags[, 19:23]')
  Hint: flag_shapes <- flags[, 19:23] powinno dać radę.

- Class: text
  Output: Każda z wyodrębnionych kolumn reprezentuje liczbę wystąpień wybranego kształtu bądź elementy graficznego w danej fladze. Interesuje nas minimum i maksimum liczby wystąpień każdego kształtu.

- Class: cmd_question
  Output: Funkcja range() zwraca minimum i maksimum wektora liczbowego. Użyj lapply(), aby wykonać funkcję range na każdej kolumnie zmiennej flag_shapes. Nie przypisuj wyniku do żadnej zmiennej.
  CorrectAnswer: lapply(flag_shapes, range)
  AnswerTests: omnitest(correctExpr='lapply(flag_shapes, range)')
  Hint: Spróbuj lapply(flag_shapes, range), aby wykonać funckję range() na każdej kolumnie flag_shapes.

- Class: cmd_question
  Output: Wykonaj tę samą operację, ale tym razem wykorzystując sapply() i przypisz wynik do zmiennej shape_mat.
  CorrectAnswer: shape_mat <- sapply(flag_shapes, range)
  AnswerTests: omnitest(correctExpr='shape_mat <- sapply(flag_shapes, range)')
  Hint: shape_mat <- sapply(flag_shapes, range) wykona funkcję range() na każdej kolumnie flag_shapes i przypisze wynik do zmiennej shape_mat.

- Class: cmd_question
  Output: Przejrzyj zawartość shape_mat.
  CorrectAnswer: shape_mat
  AnswerTests: any_of_exprs('shape_mat', 'print(shape_mat)')
  Hint: Wpisz shape_mat, aby przejrzeć zawartość zmiennej.

- Class: text
  Output: Każda kolumna shape_mat przechowuje minimum (wiersz 1) i maksimum (wiersz 2) liczby wystąpień kolejnych kształtów w różnych flagach.

- Class: cmd_question
  Output: Uzyj funkcji class(), aby potwierdzić, że shape_mat jest macierzą.
  CorrectAnswer: class(shape_mat)
  AnswerTests: omnitest(correctExpr='class(shape_mat)')
  Hint: class(shape_mat) zwróci klasę/typ zmiennej shape_mat.

- Class: text
  Output: Do tej pory sapply() radziło sobie z upraszczeniem wyniku lapply(). Przyjrzymy się przykładom gdzie sapply() nie będzie potrafiło wykonać uproszczenia i zwróci ten sam wynik co lapply().

- Class: cmd_question
  Output: Mając dany wektor, funkcja unique() zwraca wektor z usuniętymi duplikatami. Żeby zobacyzć jak działa wpisz unique(c(3, 4, 5, 5, 5, 6, 6)).
  CorrectAnswer: unique(c(3, 4, 5, 5, 5, 6, 6))
  AnswerTests: omnitest(correctExpr='unique(c(3, 4, 5, 5, 5, 6, 6))')
  Hint: Wykonaj unique(c(3, 4, 5, 5, 5, 6, 6)), aby zobaczyć jak działa funkcja unique().

- Class: cmd_question
  Output: Załóżmy, że chcemy poznać unikalne wartości w zbiorze flags. Aby to osiągnąć, wywołaj lapply() i oblicz unique() dla każdej kolmny zbioru flags, a następnie przypisz wynik do zmiennej unique_vals.
  CorrectAnswer: unique_vals <- lapply(flags, unique)
  AnswerTests: omnitest(correctExpr='unique_vals <- lapply(flags, unique)')
  Hint: Wykonaj unique_vals <- lapply(flags, unique).

- Class: cmd_question
  Output: Wypisz zawartość unique_vals na konsole.
  CorrectAnswer: unique_vals
  AnswerTests: any_of_exprs('unique_vals', 'print(unique_vals)')
  Hint: Wpisz unique_vals.

- Class: cmd_question
  Output: "Ponieważ unique_vals jest listą, możesz wykorzystać znane Ci funkcje, aby określić długość każdego elementu unique_vals (tj. unikalnych wartości każdej zmiennej). Uprość wynik, jeśli to możliwe. Podpowiedź: Wykonaj funkcję length() na każdym elemencie unique_vals."
  CorrectAnswer: sapply(unique_vals, length)
  AnswerTests: omnitest(correctExpr='sapply(unique_vals, length)')
  Hint: Wykonaj funkcję length() na każdym elemencie unique_vals za pomocą sapply().

- Class: text
  Output: Fakt, że elementy listy unique_vals są różnej długości sprawia może sprawić sapply() kłopot.

- Class: cmd_question
  Output: Za pomocą sapply() wywołaj funkcję unique() na każdej kolumnie zbioru flags, aby zobaczyć, że dostaniesz ten sam, nieuproszczony, wynik co przy wywołaniu lapply().
  CorrectAnswer: sapply(flags, unique)
  AnswerTests: omnitest(correctExpr='sapply(flags, unique)')
  Hint: Wywołaj sapply(flags, unique).

- Class: text
  Output: Okazjonalnie możesz chcieć wykonać w pętli prostą funkcję, której jeszcze nie zdefiniowałeś. Z poprzednich lekcji powinieneś pamiętać, że przydadzą nam się do tego funkcje anonimowe.

- Class: text
  Output: Załóżmy, że interesuje nas tylko druga wartość każdego elementu listy unique_vals. Ponieważ każdy element listy unique_vals jest wektorem i nie znamy wbudowanej funkcji w R, która zwraca drugi element wektora, napiszemy własną funkcję.

- Class: cmd_question
  Output: lapply(unique_vals, function(elem) elem[2]) zwróci listę zawierającą drugą wartość każdego elementu unique_vals.
  CorrectAnswer: lapply(unique_vals, function(elem) elem[2])
  AnswerTests: calculates_same_value('lapply(unique_vals, function(elem) elem[2])')
  Hint: Wykonaj lapply(unique_vals, function(elem) elem[2]), aby dostać listę zawierającą drugą wartość każdego elementu unique_vals.

- Class: text
  Output: Jedyna różnica pomiędzy tym przykładem a poprzednimi to to, że teraz nie korzystaliśmy z żadnej wbudowanej funkcji tylko napisaliśmy własną. Ponieważ napisaliśmy funkcję anonimową, zniknie ona z pamięci jak tylko lapply() wykona swoją pracę.

- Class: text
  Output: W tej lekcji nauczyłeś się dwóch bardzo przydatnych funkcji, lapply() i sapply(), które w pętli wykonują wskazaną funkcję na elementach listy. W nastepnej lekcji poznamy bliskich krewnych lapply() i sapply().
