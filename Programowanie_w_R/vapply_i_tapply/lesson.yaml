- Class: meta
  Course: Programowanie w R
  Lesson: vapply i tapply
  Author: Nick Carchedi, Dariusz Brzeziński
  Type: Standard
  Organization: JHU Biostat, Poznan University of Technology
  Version: 1.0.0

- Class: text
  Output: "W ramach poprzedniej lekcji poznałeś dwie podstawowe funkcje z rodziny *apply: lapply() i sapply(). Obie pobierają jako wejście listę, wykonują na elementach tej listy wskazaną funkcję, a następnie scalają i zwracają wynik. lapply() zawsze zwraca listę, a sapply() próbuje uprościć wynik."

- Class: text
  Output: Na tej lekcji dowiesz się jak używać funkcji vapply() i tapply(), które mają bardzo konkretne zastosowania w ramach metodologii Split-Apply-Combine. Dla spójności, będziemy pracować na tym samym zbiorze danych co podczas lekcji 'lapply i sapply'.

- Class: text
  Output: "Zbiór Flags pochodzi UCI Machine Learning Repository i zawiera opis wielu flag i symboli narodowych. Więcej informacji na temat tego zbioru można znaleźć pod adresem: http://archive.ics.uci.edu/ml/datasets/Flags"

- Class: text
  Output: Zbiór danych zapisałem do zmiennej o nazwie flags. Jeśli minęło już trochę czasu od kiedy ukończyłeś lekcję 'lapply i sapply', możesz chcieć przypomnieć sobie podstawowe właściwości analizowanego zbioru. Możesz skorzystać z funkcji dim(), head(), str() i summary(), gdy wrócisz do konsoli (>). Zaczynamy!

- Class: cmd_question
  Output: Jak widziałeś  na ostatniej lekcji, funkcja unique() zwraca wektor unikalnych wartości przechowywanych w obiekcie przekazanym jako parametr. Tym samym, sapply(flags, unique) zwróci listę zawierającą wektor unikatowych wartości dla każdej kolumny w zbiorze flags. Wykonaj to polecenie teraz.
  CorrectAnswer: sapply(flags, unique)
  AnswerTests: omnitest(correctExpr='sapply(flags, unique)')
  Hint: Wpisz sapply(flags, unique), aby dostać listę zawierającą wektor unikatowych wartości dla każdej kolumny w zbiorze flags.

- Class: text
  Output: A co by było gdybyś zapomniał jak działa unique() i pomyślał, że zwraca *liczbę* unikatowych wartości w przekazanym obiekcie? Wtedy mógłbyś niesłusznie przypuszczać, że sapply(flags, unique) zwróci wektor liczbowy, wynik pętli zwróciłby listę z elementami o długości 1 i funkcja sapply() uprościłaby wynik do wektora.

- Class: text
  Output: Pracując interaktywnie w konsoli nie byłby to problem, bo patrząc na wynik polecenia od razu dostrzegłbyś wynik. Ale... pracując nieinteraktywnie (pisząc własne funkcje), taki błąd mógłby pozostać niezauważony i powodować niewłaściwe wyniki w dalszej analizie. Warto zatem zachować dodatkową ostrożność, a pomoże nam w tym funkcja vapply().

- Class: text
  Output: Podczas gdy sapply() próbuje 'zgadnąć' poprawny format wyniku, vapply() pozwala jawnie ten format zdefiniować. Jeśli rezultat nie odpowiada wyspecyfikowanemu formatowi, vapply() rzuci błędem i zatrzyma przetwarzanie. Pomaga to ustrzec się przed niespdziewanymi wynikami, które można otrzymać korzystając z sapply().

- Class: cmd_question
  Output: Wypróbuj polecenie vapply(flags, unique, numeric(1)), które mówi, że w wyniku oczekujesz, że każdy element będzie wektorem o długości 1 typu numeric. Ponieważ tak w rzeczywistości nie jest, DOSTANIESZ BŁĄD. Gdy już pojawi się błąd, wpisz w konsoli ok() aby przejść do następnego pytania.
  CorrectAnswer: ok()
  AnswerTests: omnitest(correctExpr="ok()")
  Hint: Wpisz vapply(flags, unique, numeric(1)), a następnie ok().

- Class: cmd_question
  Output: Na poprzedniej lekcji wywołaliśmy sapply(flags, class), aby dostać wektor tekstowy zawierający nazwy typów wszyskich kolumn w zbiorze. Wpisz to polecenie jeszcze raz i spójrz na wynik.
  CorrectAnswer: sapply(flags, class)
  AnswerTests: omnitest(correctExpr="sapply(flags, class)")
  Hint: Wpisz sapply(flags, class), aby dostać wektor tekstowy z nazwami typów kolumn.

- Class: cmd_question
  Output: Jeśli chcielibyśmy jawnie określić strukturę oczekiwanego wyniku, możemy użyć wyrażenia vapply(flags, class, character(1)). Parametr 'character(1)' mówi R, że oczekujemy że funkcja class dla KAŻDEJ kolumny zbioru flags zwróci wektor tekstowy o długości 1. Wypróbuj to wyrażenie teraz.
  CorrectAnswer: vapply(flags, class, character(1))
  AnswerTests: omnitest(correctExpr="vapply(flags, class, character(1))")
  Hint: Wpisz vapply(flags, class, character(1)), aby dostać wektor tekstowy z nazwami typów kolumn.

- Class: text
  Output: Zauważ, że nasze oczekiwania (character(1)) zostały spełnione i wynik vapply() jest taki sam jak dla sapply().

- Class: text
  Output: Możesz zapamiętać, że vapply() to 'bezpieczniejsza' wersja sapply(), ponieważ wymaga podania oczekiwanego formatu wyniku. Dodatkowo dla większych zbiorów danych vapply() może działać trochę szybciej niż sapply(). Niemniej jednak, podczas interaktywnej pracy w konsoli, sapply() oszczędza trochę pisania i często wystarcza.

- Class: text
  Output: Jako analityk danych, często będziesz chciał podzielić dane na grupy zgodnie z wartością jakiejś zmienej, a potem wykonać funkcję na elementach każdej grupy osobno. Następna funkcja, którą poznamy, tapply(), dokładnie tym się zajmuje.

- Class: cmd_question
  Output: Wpisz ?tapply i otwórz dokumentację.
  CorrectAnswer: ?tapply
  AnswerTests: any_of_exprs('?tapply', 'help(tapply)')
  Hint: Otwórz dokumentację za pomocą polecenia ?tapply.

- Class: cmd_question
  Output: Zmienna 'landmass' w naszym zbiorze danych przyjmuje wartości całkowitoliczbowe od 1 do 6 i  każda z tych liczb reprezentuje inny zakątek świata. Wpisz table(flags$landmass), aby zobaczyć ile flag/krajów należy do każdej grupy.
  CorrectAnswer: table(flags$landmass)
  AnswerTests: omnitest(correctExpr="table(flags$landmass)")
  Hint: Wpisz table(flags$landmass), aby zobaczyć ile flag/krajów należy do każdej grupy.

- Class: cmd_question
  Output: Zmienna 'animate' przyjmuje wartość 1 jeśli flaga kraju przedstawia żywą istotę (np. orła, drzewo, ludzką rękę) i 0 w przeciwnym razie. Wpisz table(flags$animate), aby zobaczyć ile flag zawiera rysunek żywej istoty.
  CorrectAnswer: table(flags$animate)
  AnswerTests: omnitest(correctExpr="table(flags$animate)")
  Hint: Wpisz table(flags$animate), aby zobaczyć ile flag zawiera obraz żywej istoty.

- Class: text
  Output: Widzimy, że 39 flag zawiera żywą istotę (animate = 1) i 155 żadnej żywej istoty nie przedstawia (animate = 0).

- Class: cmd_question
  Output: Jeśli wylicza się średnią arytmetyczną zbioru zer i jedynek dostaje się proporcję jedynek w zbiorze. Użyj polecenia tapply(flags$animate, flags$landmass, mean), aby wywołać funkcję mean na zmiennej 'animate' osobno dla każdej grupy zdefiniowanej wartościami w kolumnie landmass. Jeśli polecenie się powiedzie, dostaniemy proporcję flag zawierających żywą istotę W RAMACH każdej grupy geograficznej (landmass).
  CorrectAnswer: tapply(flags$animate, flags$landmass, mean)
  AnswerTests: omnitest(correctExpr="tapply(flags$animate, flags$landmass, mean)")
  Hint: tapply(flags$animate, flags$landmass, mean) powie nam jaka jest proporcja flag zawierających żywą istotę w ramach każdego z sześciu bloków terytorialnych.

- Class: text
  Output: Pierwsza grupa terytorialna (landmass = 1) odpowiada Ameryce Północnej i zawiera największą proporcję flag z rysunkiem żyjącej istoty(0.4194).

- Class: cmd_question
  Output: Podobnie możemy spojrzeć na podsumwanie populacji (w milionach) dla krajów z i bez czerwonego koloru w fladze wywołując tapply(flags$population, flags$red, summary).
  CorrectAnswer: tapply(flags$population, flags$red, summary)
  AnswerTests: omnitest(correctExpr="tapply(flags$population, flags$red, summary)")
  Hint: Możesz zobaczyć podsumowanie populacji dla krajów z i bez czerwonego koloru w fladze wywołując tapply(flags$population, flags$red, summary).

- Class: mult_question  
  Output: Jaka jest mediana populacji (w milionach) dla krajów *bez* czerwonego koloru w fladze?
  AnswerChoices: 9.0; 4.0; 27.6; 3.0; 22.1; 0.0
  CorrectAnswer: 3.0
  AnswerTests: omnitest(correctVal= '3.0')
  Hint: Sprawdź wynik poprzedniego polecenia.

- Class: cmd_question
  Output: Na koniec użyj tego samego podejścia, aby zobaczyć podsumowanie (summary) populacji dla każdej z 6 wartości zmiennej landmass.
  CorrectAnswer: tapply(flags$population, flags$landmass, summary)
  AnswerTests: omnitest(correctExpr="tapply(flags$population, flags$landmass, summary)")
  Hint: "Sprobuj wykorzystać tapply z argumentami: flags$population, flags$landmass, and summary."

- Class: mult_question  
  Output: Jaka jest maksymalna populacja (w milionach) dla 4 wartości landmass (Africa)?
  AnswerChoices: 56.00; 1010.0; 119.0; 5.00; 157.00
  CorrectAnswer: 56.00
  AnswerTests: omnitest(correctVal= '56.00')
  Hint: Sprawdź wynik poprzedniego zapytania.

- Class: text  
  Output: W ramach tej lekcji dowiedziałeś się jak korzystać z vapply() jako bezpieczniejszej wersji sapply(). Poznałeś także funkcję tapply(), która dzieli dane zgodnie z wartością wybranej zmiennej, a następnie wykonuje zadanie osobno dla każdej grupy.
